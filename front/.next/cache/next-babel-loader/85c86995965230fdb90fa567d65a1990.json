{"ast":null,"code":"var _jsxFileName = \"/Users/byeongjun/My blog/front/pages/post/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from \"react\";\nimport { FormOutlined } from '@ant-design/icons';\nimport { LOAD_CURPOST_REQUEST } from \"../../reducers/post\";\nimport ReactHtmlParser from 'html-react-parser';\nimport { PageHeader, Tag, Comment, Avatar } from 'antd';\nimport CommentForm from '../../components/CommentForm';\nimport CommentList from '../../components/CommentList';\nimport wrapper from \"../../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user'; //More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\n\nconst Post = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    currentPost\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    console.log(id);\n\n    if (id) {\n      dispatch({\n        type: LOAD_CURPOST_REQUEST,\n        data: id\n      });\n    }\n  }, [id]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, currentPost && __jsx(\"div\", {\n    style: {\n      textAlign: \"right\",\n      marginRight: \"10px\",\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 29\n    }\n  }, \"\\uC791\\uC131\\uC77C\\uC790 : \", currentPost.createdAt.substr(0, 10)), currentPost && __jsx(\"h1\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"30px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  }, currentPost.title), currentPost && __jsx(PageHeader, {\n    className: \"site-page-header\",\n    tags: __jsx(Tag, {\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }, currentPost.category),\n    subTitle: currentPost.hashTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 29\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginLeft: \"15px\",\n      marginRight: \"15px\",\n      minHeight: \"700px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, currentPost && ReactHtmlParser(currentPost.content)), me ? __jsx(CommentForm, {\n    postId: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }\n  }) : __jsx(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"15px\",\n      marginBottom: \"15px\",\n      fontSize: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 50\n    }\n  }, __jsx(FormOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 149\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 165\n    }\n  }, \"\\uB313\\uAE00\\uC744 \\uC791\\uC131\\uD558\\uB824\\uBA74 \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694\")), __jsx(\"div\", {\n    style: {\n      borderTop: \"0.5px solid lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, currentPost && currentPost.Comments && currentPost.Comments.map(commentInfo => __jsx(Comment, {\n    key: commentInfo.id,\n    actions: [__jsx(\"span\", {\n      key: \"comment-nested-reply-to\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 99\n      }\n    }, \"Reply to\")],\n    author: commentInfo.User.nickname,\n    content: commentInfo.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 55\n    }\n  }))));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Post;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/pages/post/[id].js"],"names":["AppLayout","useRouter","useDispatch","useSelector","useEffect","FormOutlined","LOAD_CURPOST_REQUEST","ReactHtmlParser","PageHeader","Tag","Comment","Avatar","CommentForm","CommentList","wrapper","END","axios","LOAD_MY_INFO_REQUEST","Post","dispatch","router","id","query","currentPost","state","post","me","user","console","log","type","data","textAlign","marginRight","marginTop","createdAt","substr","title","category","hashTag","marginLeft","minHeight","content","marginBottom","fontSize","borderTop","Comments","map","commentInfo","User","nickname","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAAQC,YAAR,QAA2B,mBAA3B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,OAA1B,EAAmCC,MAAnC,QAAgD,MAAhD;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,qBAArC,C,CACA;AACA;;AACA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACA,QAAMkB,MAAM,GAAGnB,SAAS,EAAxB;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBpB,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAnC;AACA,QAAM;AAACC,IAAAA;AAAD,MAAOvB,WAAW,CAAEqB,KAAD,IAASA,KAAK,CAACG,IAAhB,CAAxB;AACAvB,EAAAA,SAAS,CAAC,MAAI;AACVwB,IAAAA,OAAO,CAACC,GAAR,CAAYR,EAAZ;;AACA,QAAGA,EAAH,EAAM;AACFF,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAGxB,oBADF;AAELyB,QAAAA,IAAI,EAAGV;AAFF,OAAD,CAAR;AAIH;AAEJ,GATQ,EASP,CAACA,EAAD,CATO,CAAT;AAWA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,WAAW,IAAI;AAAK,IAAA,KAAK,EAAI;AAACS,MAAAA,SAAS,EAAG,OAAb;AAAsBC,MAAAA,WAAW,EAAG,MAApC;AAA4CC,MAAAA,SAAS,EAAG;AAAxD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAuFX,WAAW,CAACY,SAAZ,CAAsBC,MAAtB,CAA6B,CAA7B,EAA+B,EAA/B,CAAvF,CADpB,EAEKb,WAAW,IAAI;AAAI,IAAA,KAAK,EAAI;AAACS,MAAAA,SAAS,EAAG,QAAb;AAAuBE,MAAAA,SAAS,EAAG;AAAnC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0DX,WAAW,CAACc,KAAtE,CAFpB,EAGKd,WAAW,IAAI,MAAC,UAAD;AAChB,IAAA,SAAS,EAAC,kBADM;AAEhB,IAAA,IAAI,EAAI,MAAC,GAAD;AAAK,MAAA,KAAK,EAAG,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqBA,WAAW,CAACe,QAAjC,CAFQ;AAGhB,IAAA,QAAQ,EAAEf,WAAW,CAACgB,OAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHpB,EAQI;AAAK,IAAA,KAAK,EAAI;AAACC,MAAAA,UAAU,EAAG,MAAd;AAAqBP,MAAAA,WAAW,EAAG,MAAnC;AAA0CQ,MAAAA,SAAS,EAAG;AAAtD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+ElB,WAAW,IAAIhB,eAAe,CAACgB,WAAW,CAACmB,OAAb,CAA7G,CARJ,EASKhB,EAAE,GAAG,MAAC,WAAD;AAAa,IAAA,MAAM,EAAIL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAkC;AAAK,IAAA,KAAK,EAAI;AAACW,MAAAA,SAAS,EAAG,QAAb;AAAuBE,MAAAA,SAAS,EAAG,MAAnC;AAA0CS,MAAAA,YAAY,EAAG,MAAzD;AAAiEC,MAAAA,QAAQ,EAAG;AAA5E,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmG,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnG,EAAmH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGAAnH,CATzC,EAUI;AAAK,IAAA,KAAK,EAAI;AAACC,MAAAA,SAAS,EAAG;AAAb,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCtB,WAAW,IAAIA,WAAW,CAACuB,QAA3B,IAEDvB,WAAW,CAACuB,QAAZ,CAAqBC,GAArB,CAA0BC,WAAD,IAAiB,MAAC,OAAD;AAAS,IAAA,GAAG,EAAIA,WAAW,CAAC3B,EAA5B;AAAkC,IAAA,OAAO,EAAE,CAAC;AAAM,MAAA,GAAG,EAAC,yBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAD,CAA3C;AACzC,IAAA,MAAM,EAAI2B,WAAW,CAACC,IAAZ,CAAiBC,QADc;AAEzC,IAAA,OAAO,EAAIF,WAAW,CAACN,OAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1C,CAHA,CAVJ,CADJ;AAuBH,CAxCD;;AA0CA,OAAO,MAAMS,kBAAkB,GAAGrC,OAAO,CAACqC,kBAAR,CAA2B,MAAOC,OAAP,IAAmB;AAC5E;AACA,QAAMC,MAAM,GAAGD,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACE,GAAR,CAAYC,OAAZ,CAAoBF,MAAlC,GAA2C,EAA1D;AACArC,EAAAA,KAAK,CAACwC,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgC,EAAhC;;AACA,MAAIL,OAAO,CAACE,GAAR,IAAeD,MAAnB,EAA2B;AACzBrC,IAAAA,KAAK,CAACwC,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgCJ,MAAhC;AACD;;AACDD,EAAAA,OAAO,CAACM,KAAR,CAAcvC,QAAd,CAAuB;AACrBW,IAAAA,IAAI,EAAEb;AADe,GAAvB;AAGAmC,EAAAA,OAAO,CAACM,KAAR,CAAcvC,QAAd,CAAuBJ,GAAvB;AACA,QAAMqC,OAAO,CAACM,KAAR,CAAcC,QAAd,CAAuBC,SAAvB,EAAN;AACD,CAZ+B,CAA3B;AAeP,eAAe1C,IAAf","sourcesContent":["import AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from \"react\";\nimport {FormOutlined} from '@ant-design/icons'\nimport { LOAD_CURPOST_REQUEST } from \"../../reducers/post\";\nimport ReactHtmlParser from 'html-react-parser'\nimport { PageHeader, Tag, Comment, Avatar} from 'antd';\nimport CommentForm from '../../components/CommentForm';\nimport CommentList from '../../components/CommentList';\nimport wrapper from \"../../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios'\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user'\n//More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\nconst Post = () => {\n    const dispatch = useDispatch();\n    const router = useRouter();\n    const { id } = router.query;\n    const { currentPost } = useSelector((state) => state.post);\n    const {me} = useSelector((state)=>state.user);\n    useEffect(()=>{\n        console.log(id);\n        if(id){\n            dispatch({\n                type : LOAD_CURPOST_REQUEST,\n                data : id,\n            })\n        }\n        \n    },[id])\n\n    return (\n        <AppLayout>\n            {currentPost && <div style = {{textAlign : \"right\", marginRight : \"10px\", marginTop : \"20px\"}}>작성일자 : {currentPost.createdAt.substr(0,10)}</div>}\n            {currentPost && <h1 style = {{textAlign : \"center\", marginTop : \"30px\"}}>{currentPost.title}</h1>}\n            {currentPost && <PageHeader\n            className=\"site-page-header\"\n            tags = {<Tag color = \"blue\">{currentPost.category}</Tag>}\n            subTitle={currentPost.hashTag}\n            />}\n            <div style = {{marginLeft : \"15px\",marginRight : \"15px\",minHeight : \"700px\"}}>{currentPost && ReactHtmlParser(currentPost.content)}</div>\n            {me ? <CommentForm postId = {id}/> : <div style = {{textAlign : \"center\", marginTop : \"15px\",marginBottom : \"15px\", fontSize : \"20px\"}}><FormOutlined /><div>댓글을 작성하려면 로그인 해주세요</div></div>}\n            <div style = {{borderTop : \"0.5px solid lightgray\"}}>\n            {currentPost && currentPost.Comments \n            &&\n            currentPost.Comments.map((commentInfo) => <Comment key = {commentInfo.id}   actions={[<span key=\"comment-nested-reply-to\">Reply to</span>]}\n             author = {commentInfo.User.nickname} \n             content = {commentInfo.content} >\n\n             </Comment> )\n            }\n            </div>\n        </AppLayout>\n    )\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    })\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  });\n  \n\nexport default Post;"]},"metadata":{},"sourceType":"module"}