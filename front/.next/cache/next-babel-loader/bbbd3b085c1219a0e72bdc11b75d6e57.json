{"ast":null,"code":"var _jsxFileName = \"/Users/byeongjun/My blog/front/pages/UpdatePost/[id].js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport AppLayout from \"../components/AppLayout\";\nimport Head from 'next/head';\nimport Router, { useRouter } from 'next/router';\nimport WritePostForm from '../../components/WritePostForm';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\nimport wrapper from \"../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\nconst UpdatePost = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  useEffect(() => {\n    if (me.email !== \"neostgeart@gmail.com\") {\n      alert(\"글 수정 권한이 없습니다\");\n      Router.replace('/');\n    }\n  }, [me]);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }, \"\\uAE00\\uC218\\uC815\\uD558\\uAE30\")), __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, __jsx(WritePostForm, {\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default UpdatePost;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/pages/UpdatePost/[id].js"],"names":["React","useEffect","AppLayout","Head","Router","useRouter","WritePostForm","LOAD_MY_INFO_REQUEST","wrapper","END","axios","useSelector","UpdatePost","me","state","user","router","id","query","email","alert","replace","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","dispatch","type","sagaTask","toPromise"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAQC,MAAR,IAAiBC,SAAjB,QAAkC,aAAlC;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AAEA,OAAOC,OAAP,MAAoB,yBAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,UAAU,GAAE,MAAM;AACpB,QAAM;AAACC,IAAAA;AAAD,MAAOF,WAAW,CAAEG,KAAD,IAASA,KAAK,CAACC,IAAhB,CAAxB;AACA,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;AACAjB,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGY,EAAE,CAACM,KAAH,KAAa,sBAAhB,EACA;AACIC,MAAAA,KAAK,CAAC,eAAD,CAAL;AACAhB,MAAAA,MAAM,CAACiB,OAAP,CAAe,GAAf;AACH;AACJ,GANQ,EAMP,CAACR,EAAD,CANO,CAAT;AAQA,SACI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,CADJ,EAII,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAe,IAAA,EAAE,EAAII,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,CADJ;AAUH,CAtBD;;AAwBA,OAAO,MAAMK,kBAAkB,GAAGd,OAAO,CAACc,kBAAR,CAA2B,MAAOC,OAAP,IAAmB;AAC5E;AACA,QAAMC,MAAM,GAAGD,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACE,GAAR,CAAYC,OAAZ,CAAoBF,MAAlC,GAA2C,EAA1D;AACAd,EAAAA,KAAK,CAACiB,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgC,EAAhC;;AACA,MAAIL,OAAO,CAACE,GAAR,IAAeD,MAAnB,EAA2B;AACzBd,IAAAA,KAAK,CAACiB,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgCJ,MAAhC;AACD;;AACDD,EAAAA,OAAO,CAACM,KAAR,CAAcC,QAAd,CAAuB;AACrBC,IAAAA,IAAI,EAAExB;AADe,GAAvB;AAGAgB,EAAAA,OAAO,CAACM,KAAR,CAAcC,QAAd,CAAuBrB,GAAvB;AACA,QAAMc,OAAO,CAACM,KAAR,CAAcG,QAAd,CAAuBC,SAAvB,EAAN;AACD,CAZ+B,CAA3B;AAcP,eAAerB,UAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport AppLayout from \"../components/AppLayout\";\nimport Head from 'next/head';\nimport  Router, {useRouter } from 'next/router';\nimport WritePostForm from '../../components/WritePostForm';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user'\n\nimport wrapper from \"../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios'\nimport { useSelector } from 'react-redux';\n\nconst UpdatePost= () => {\n    const {me} = useSelector((state)=>state.user);\n    const router = useRouter();\n    const { id } = router.query;\n    useEffect(()=>{\n        if(me.email !== \"neostgeart@gmail.com\")\n        {\n            alert(\"글 수정 권한이 없습니다\");\n            Router.replace('/');\n        }\n    },[me])\n\n    return (\n        <>\n            <Head>\n                <title>글수정하기</title>\n            </Head>\n            <AppLayout>\n                <WritePostForm id = {id}/>\n            </AppLayout>\n        </>\n    );\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    })\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  });\n\nexport default UpdatePost;"]},"metadata":{},"sourceType":"module"}