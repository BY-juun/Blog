{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { all, fork, delay, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, SEARCH_POSTS_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, LOAD_CATEGORYPOSTS_FAILURE, LOAD_CATEGORYPOSTS_REQUEST, LOAD_CATEGORYPOSTS_SUCCESS, LOAD_CURPOST_FAILURE, LOAD_CURPOST_REQUEST, LOAD_CURPOST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_POST_SUCCESS,\n      data: result.data //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"결과 : \", result);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: REMOVE_POST_SUCCESS,\n      data: result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    console.log(result.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: UPDATE_POST_SUCCESS,\n      data: result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_POSTS_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction searchPostsAPI(data) {\n  return axios.get(`/posts/search/${encodeURIComponent(data)}`);\n}\n\nfunction* searchPosts(action) {\n  try {\n    console.log(\"action.data : \", action.data);\n    const result = yield call(searchPostsAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: SEARCH_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SEARCH_POSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCategorypostsAPI(data) {\n  return axios.get(`/posts/load/${data}`);\n}\n\nfunction* loadCategoryposts(action) {\n  try {\n    const result = yield call(loadCategorypostsAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CATEGORYPOSTS_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CATEGORYPOSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCurpostAPI(data) {\n  return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n  try {\n    const result = yield call(loadCurpostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CURPOST_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CURPOST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCurpost() {\n  yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCatoryposts() {\n  yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadSearchposts() {\n  yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n} //eventlistner와 비슷\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchUpdatePost), fork(watchLoadPost), fork(watchLoadCurpost), fork(watchLoadCatoryposts), fork(watchLoadSearchposts)]);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["all","fork","delay","takeLatest","put","call","axios","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","LOAD_CATEGORYPOSTS_FAILURE","LOAD_CATEGORYPOSTS_REQUEST","LOAD_CATEGORYPOSTS_SUCCESS","LOAD_CURPOST_FAILURE","LOAD_CURPOST_REQUEST","LOAD_CURPOST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","result","type","error","console","response","addCommentAPI","postId","addComment","log","removePostAPI","delete","removePost","updatePostAPI","patch","id","updatePost","loadPostsAPI","get","loadPosts","searchPostsAPI","encodeURIComponent","searchPosts","loadCategorypostsAPI","loadCategoryposts","loadCurpostAPI","loadCurpost","watchAddPost","watchAddComment","watchRemovePost","watchUpdatePost","watchLoadPost","watchLoadCurpost","watchLoadCatoryposts","watchLoadSearchposts","postSaga"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { all, fork, delay, takeLatest, put , call} from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    SEARCH_POSTS_FAILURE,\n    SEARCH_POSTS_REQUEST,\n    SEARCH_POSTS_SUCCESS,\n    LOAD_CATEGORYPOSTS_FAILURE,\n    LOAD_CATEGORYPOSTS_REQUEST,\n    LOAD_CATEGORYPOSTS_SUCCESS,\n    LOAD_CURPOST_FAILURE,\n    LOAD_CURPOST_REQUEST,\n    LOAD_CURPOST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            \n            type: ADD_POST_SUCCESS,\n            data : result.data,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_POST_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI,action.data)\n        console.log(\"결과 : \" , result);\n        yield put({ //put은 dispatch라고 생각\n            type: ADD_COMMENT_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_COMMENT_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI,action.data);\n        yield put({ //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n    try {        \n        const result = yield call(updatePostAPI,action.data)\n        console.log(result.data);\n        yield put({ //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadPostsAPI() {\n    return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction searchPostsAPI(data) {\n    return axios.get(`/posts/search/${encodeURIComponent(data)}`);\n}\n\nfunction* searchPosts(action) {\n    try {\n        console.log(\"action.data : \", action.data);\n        const result = yield call(searchPostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: SEARCH_POSTS_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: SEARCH_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\n\nfunction loadCategorypostsAPI(data) {\n    return axios.get(`/posts/load/${data}`);\n}\n\nfunction* loadCategoryposts(action) {\n    try {\n        const result = yield call(loadCategorypostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CATEGORYPOSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CATEGORYPOSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadCurpostAPI(data) {\n    return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n    try {\n        const result = yield call(loadCurpostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CURPOST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CURPOST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\nfunction* watchLoadCurpost() {\n    yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\nfunction* watchLoadCatoryposts() {\n    yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\nfunction* watchLoadSearchposts() {\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n} //eventlistner와 비슷\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n        fork(watchLoadPost),\n        fork(watchLoadCurpost),\n        fork(watchLoadCatoryposts),\n        fork(watchLoadSearchposts),\n    ])\n}"]},"metadata":{},"sourceType":"module"}