{"ast":null,"code":"var _jsxFileName = \"/Users/byeongjun/My blog/front/pages/category/[category].js\";\nvar __jsx = React.createElement;\nimport AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from 'next/router';\nimport { useSelector } from 'react-redux';\nimport React from 'react';\nimport Head from 'next/head';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_CATEGORYPOSTS_REQUEST } from '../../reducers/post'; //More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\n\nconst category = () => {\n  const router = useRouter();\n  const {\n    category\n  } = router.query;\n  const {\n    Posts\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    console.log(id);\n\n    if (category) {\n      dispatch({\n        type: LOAD_CATEGORYPOSTS_REQUEST,\n        data: category\n      });\n    }\n  }, [category]);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, category)), __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, Posts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    style: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 37\n    }\n  }))));\n};\n\nexport default category;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/pages/category/[category].js"],"names":["AppLayout","useRouter","useSelector","React","Head","PostCard","LOAD_CATEGORYPOSTS_REQUEST","category","router","query","Posts","state","post","useEffect","console","log","id","dispatch","type","data","map"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAAQC,0BAAR,QAAyC,qBAAzC,C,CACA;AACA;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAeC,MAAM,CAACC,KAA5B;AACA,QAAM;AAACC,IAAAA;AAAD,MAAUR,WAAW,CAAES,KAAD,IAAUA,KAAK,CAACC,IAAjB,CAA3B;AACAC,EAAAA,SAAS,CAAC,MAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;;AACA,QAAGT,QAAH,EAAY;AACRU,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAGZ,0BADF;AAELa,QAAAA,IAAI,EAAGZ;AAFF,OAAD,CAAR;AAIH;AACJ,GARQ,EAQP,CAACA,QAAD,CARO,CAAT;AASA,SAEI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,QAAR,CADJ,CADJ,EAII,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,KAAK,CAACU,GAAN,CAAWR,IAAD,IAAS,MAAC,QAAD;AAAW,IAAA,GAAG,EAAIA,IAAI,CAACI,EAAvB;AAA2B,IAAA,IAAI,EAAIJ,IAAnC;AAAyC,IAAA,KAAK,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnB,CADL,CAJJ,CAFJ;AAWH,CAxBD;;AA0BA,eAAeL,QAAf","sourcesContent":["import AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from 'next/router';\nimport { useSelector } from 'react-redux';\nimport React from 'react';\nimport Head from 'next/head';\nimport PostCard from '../../components/PostCard';\nimport {LOAD_CATEGORYPOSTS_REQUEST} from '../../reducers/post'\n//More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\nconst category = () => {\n    const router = useRouter();\n    const { category } = router.query;\n    const {Posts} = useSelector((state)=>(state.post));\n    useEffect(()=>{\n        console.log(id);\n        if(category){\n            dispatch({\n                type : LOAD_CATEGORYPOSTS_REQUEST,\n                data : category,\n            })\n        }\n    },[category])\n    return (\n        \n        <>\n            <Head>\n                <title>{category}</title>\n            </Head>\n            <AppLayout>\n                {Posts.map((post)=> <PostCard  key = {post.id} post = {post} style/>)}\n            </AppLayout>\n        </>\n    );\n};\n\nexport default category;"]},"metadata":{},"sourceType":"module"}