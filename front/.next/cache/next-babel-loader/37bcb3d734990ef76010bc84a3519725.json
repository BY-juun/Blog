{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport AppLayout from \"../components/AppLayout\";\nimport Head from 'next/head';\nimport LoginForm from '../components/LoginForm';\nimport { useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from \"../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { message } from 'antd';\n\nconst Login = () => {\n  const {\n    me,\n    logInDone\n  } = useSelector(state => state.user);\n  const id = me === null || me === void 0 ? void 0 : me.id;\n  useEffect(() => {\n    if (me && id) {\n      if (logInDone) {\n        message.success(\"로그인이 완료되었습니다! 메인화면으로 이동합니다.\");\n        Router.replace('/');\n      } else {\n        message.error(\"이미 로그인한 사용자입니다. 메인화면으로 이동합니다.\");\n        Router.replace('/');\n      }\n    }\n  }, [me, id]);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"\\uB85C\\uADF8\\uC778\")), __jsx(AppLayout, null, __jsx(LoginForm, null)));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Login;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/pages/login.js"],"names":["React","useEffect","AppLayout","Head","LoginForm","useSelector","Router","LOAD_MY_INFO_REQUEST","wrapper","END","axios","message","Login","me","logInDone","state","user","id","success","replace","error","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","dispatch","type","sagaTask","toPromise"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAEhB,QAAM;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,MAAkBT,WAAW,CAAEU,KAAD,IAASA,KAAK,CAACC,IAAhB,CAAnC;AACA,QAAMC,EAAE,GAAGJ,EAAH,aAAGA,EAAH,uBAAGA,EAAE,CAAEI,EAAf;AACAhB,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGY,EAAE,IAAII,EAAT,EAAY;AACR,UAAGH,SAAH,EAAa;AACTH,QAAAA,OAAO,CAACO,OAAR,CAAgB,6BAAhB;AACAZ,QAAAA,MAAM,CAACa,OAAP,CAAe,GAAf;AACH,OAHD,MAIK;AACDR,QAAAA,OAAO,CAACS,KAAR,CAAc,+BAAd;AACAd,QAAAA,MAAM,CAACa,OAAP,CAAe,GAAf;AACH;AAEJ;AACJ,GAZQ,EAYP,CAACN,EAAD,EAAII,EAAJ,CAZO,CAAT;AAeA,SACI,4BACI,MAAC,IAAD,QACI,0CADJ,CADJ,EAII,MAAC,SAAD,QACI,MAAC,SAAD,OADJ,CAJJ,CADJ;AAUH,CA7BD;;AAgCA,OAAO,MAAMI,kBAAkB,GAAGb,OAAO,CAACa,kBAAR,CAA2B,MAAOC,OAAP,IAAmB;AAC5E,QAAMC,MAAM,GAAGD,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACE,GAAR,CAAYC,OAAZ,CAAoBF,MAAlC,GAA2C,EAA1D;AACAb,EAAAA,KAAK,CAACgB,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgC,EAAhC;;AACA,MAAIL,OAAO,CAACE,GAAR,IAAeD,MAAnB,EAA2B;AACzBb,IAAAA,KAAK,CAACgB,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgCJ,MAAhC;AACD;;AACDD,EAAAA,OAAO,CAACM,KAAR,CAAcC,QAAd,CAAuB;AACrBC,IAAAA,IAAI,EAAEvB;AADe,GAAvB;AAGAe,EAAAA,OAAO,CAACM,KAAR,CAAcC,QAAd,CAAuBpB,GAAvB;AACA,QAAMa,OAAO,CAACM,KAAR,CAAcG,QAAd,CAAuBC,SAAvB,EAAN;AACD,CAX+B,CAA3B;AAaP,eAAepB,KAAf","sourcesContent":["import React,{useEffect} from 'react';\nimport AppLayout from \"../components/AppLayout\";\nimport Head from 'next/head';\nimport LoginForm from '../components/LoginForm';\nimport { useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user'\nimport wrapper from \"../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios'\nimport { message } from 'antd';\n\nconst Login = () => {\n\n    const {me, logInDone} = useSelector((state)=>state.user);\n    const id = me?.id;\n    useEffect(()=>{\n        if(me && id){\n            if(logInDone){\n                message.success(\"로그인이 완료되었습니다! 메인화면으로 이동합니다.\");\n                Router.replace('/');\n            }\n             else{\n                message.error(\"이미 로그인한 사용자입니다. 메인화면으로 이동합니다.\");\n                Router.replace('/');\n            }\n            \n        }\n    },[me,id])\n\n\n    return (\n        <>\n            <Head>\n                <title>로그인</title>\n            </Head>\n            <AppLayout>\n                <LoginForm />\n            </AppLayout>\n        </>\n    );\n}\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    })\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  });\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}