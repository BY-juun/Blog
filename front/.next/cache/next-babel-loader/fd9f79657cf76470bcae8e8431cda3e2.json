{"ast":null,"code":"var __jsx = React.createElement;\nimport AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport PostCard from '../../components/PostCard';\nimport { Pagination } from 'antd';\n\n//More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\nvar category = function category() {\n  var _useState = useState(1),\n      current = _useState[0],\n      setCurrent = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      Posts = _useSelector.Posts;\n\n  var startIndex = 0;\n  var lastIndex = 6;\n\n  var _useState2 = useState(Posts.slice(startIndex, lastIndex)),\n      showPosts = _useState2[0],\n      setShowPosts = _useState2[1];\n\n  var router = useRouter();\n  var category = router.query.category;\n  var onChange = useCallback(function (page) {\n    setCurrent(page);\n    console.log(current);\n    startIndex = (page - 1) * 6;\n    lastIndex = startIndex + 6;\n    setShowPosts(Posts.slice(startIndex, lastIndex));\n  }, [current, showPosts]);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, category)), __jsx(AppLayout, null, showPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      style: true\n    });\n  }), __jsx(Pagination, {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\",\n      marginBottom: \"15px\"\n    },\n    current: current,\n    onChange: onChange,\n    total: Posts.length * 2\n  })));\n};\n\nexport var __N_SSP = true;\nexport default category;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/pages/category/[category].js"],"names":["AppLayout","useRouter","useDispatch","useSelector","React","useCallback","useEffect","useState","Head","PostCard","Pagination","category","current","setCurrent","state","post","Posts","startIndex","lastIndex","slice","showPosts","setShowPosts","router","query","onChange","page","console","log","map","id","textAlign","marginTop","marginBottom","length"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,SAASC,UAAT,QAA2B,MAA3B;;AAMA;AACA;AACA,IAAMC,QAAQ,GAAG,oBAAM;AACnB,kBAA6BJ,QAAQ,CAAC,CAAD,CAArC;AAAA,MAAOK,OAAP;AAAA,MAAeC,UAAf;;AACA,qBAAgBV,WAAW,CAAC,UAACW,KAAD;AAAA,WAAUA,KAAK,CAACC,IAAhB;AAAA,GAAD,CAA3B;AAAA,MAAOC,KAAP,gBAAOA,KAAP;;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,mBAAkCX,QAAQ,CAACS,KAAK,CAACG,KAAN,CAAYF,UAAZ,EAAuBC,SAAvB,CAAD,CAA1C;AAAA,MAAOE,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,MAAM,GAAGrB,SAAS,EAAxB;AACA,MAAQU,QAAR,GAAqBW,MAAM,CAACC,KAA5B,CAAQZ,QAAR;AAEA,MAAMa,QAAQ,GAAGnB,WAAW,CAAC,UAAAoB,IAAI,EAAI;AACjCZ,IAAAA,UAAU,CAACY,IAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ;AACAK,IAAAA,UAAU,GAAG,CAACQ,IAAI,GAAC,CAAN,IAAW,CAAxB;AACAP,IAAAA,SAAS,GAAGD,UAAU,GAAG,CAAzB;AACAI,IAAAA,YAAY,CAACL,KAAK,CAACG,KAAN,CAAYF,UAAZ,EAAuBC,SAAvB,CAAD,CAAZ;AACH,GAN2B,EAM1B,CAACN,OAAD,EAASQ,SAAT,CAN0B,CAA5B;AASA,SACI,4BACI,MAAC,IAAD,QACI,qBAAQT,QAAR,CADJ,CADJ,EAII,MAAC,SAAD,QACKS,SAAS,CAACQ,GAAV,CAAc,UAACb,IAAD;AAAA,WAAS,MAAC,QAAD;AAAW,MAAA,GAAG,EAAIA,IAAI,CAACc,EAAvB;AAA2B,MAAA,IAAI,EAAId,IAAnC;AAAyC,MAAA,KAAK;AAA9C,MAAT;AAAA,GAAd,CADL,EAEI,MAAC,UAAD;AAAY,IAAA,KAAK,EAAI;AAACe,MAAAA,SAAS,EAAG,QAAb;AAAuBC,MAAAA,SAAS,EAAG,MAAnC;AAA2CC,MAAAA,YAAY,EAAG;AAA1D,KAArB;AAAwF,IAAA,OAAO,EAAEpB,OAAjG;AAA0G,IAAA,QAAQ,EAAEY,QAApH;AAA8H,IAAA,KAAK,EAAER,KAAK,CAACiB,MAAN,GAAa;AAAlJ,IAFJ,CAJJ,CADJ;AAWH,CA7BD;;;AAkDA,eAAetB,QAAf","sourcesContent":["import AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport PostCard from '../../components/PostCard';\nimport {LOAD_CATEGORYPOSTS_REQUEST} from '../../reducers/post'\nimport { Pagination } from 'antd';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user'\nimport wrapper from \"../../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios'\n\n//More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\nconst category = () => {\n    const [current,setCurrent] = useState(1);\n    const {Posts} = useSelector((state)=>(state.post));\n    let startIndex = 0; \n    let lastIndex = 6;\n    const [showPosts, setShowPosts] = useState(Posts.slice(startIndex,lastIndex));\n    const router = useRouter();\n    const { category } = router.query;\n\n    const onChange = useCallback(page => {\n        setCurrent(page);\n        console.log(current);\n        startIndex = (page-1) * 6;\n        lastIndex = startIndex + 6;\n        setShowPosts(Posts.slice(startIndex,lastIndex));\n    },[current,showPosts]);\n    \n\n    return (\n        <>\n            <Head>\n                <title>{category}</title>\n            </Head>\n            <AppLayout>\n                {showPosts.map((post)=> <PostCard  key = {post.id} post = {post} style/>)}\n                <Pagination style = {{textAlign : \"center\", marginTop : \"20px\", marginBottom : \"15px\"}} current={current} onChange={onChange} total={Posts.length*2} />\n            </AppLayout>\n        </> \n    );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    })\n    context.store.dispatch({\n        type : LOAD_CATEGORYPOSTS_REQUEST,\n        data: context.params.category,\n    });\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  });\n  \n\nexport default category;"]},"metadata":{},"sourceType":"module"}