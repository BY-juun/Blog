{"ast":null,"code":"import { all, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SET_CURRENT_PAGENUM, UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, SEARCH_POSTS_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, LOAD_CATEGORYPOSTS_FAILURE, LOAD_CATEGORYPOSTS_REQUEST, LOAD_CATEGORYPOSTS_SUCCESS, LOAD_CURPOST_FAILURE, LOAD_CURPOST_REQUEST, LOAD_CURPOST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_POST_SUCCESS,\n      data: result.data //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"결과 : \", result);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: REMOVE_POST_SUCCESS,\n      data: result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    console.log(result.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: UPDATE_POST_SUCCESS,\n      data: result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadMainPostsAPI(data) {\n  return axios.get(`/posts/load/main/${data.page}`);\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n    yield put({\n      type: SET_CURRENT_PAGENUM,\n      data: action.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction searchPostsAPI(data) {\n  return axios.get(`/posts/search/${encodeURIComponent(data)}`);\n}\n\nfunction* searchPosts(action) {\n  try {\n    console.log(\"action.data : \", action.data);\n    const result = yield call(searchPostsAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: SEARCH_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SEARCH_POSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCategorypostsAPI(data) {\n  return axios.get(`/posts/load/${data.category}/${data.page}`);\n}\n\nfunction* loadCategoryposts(action) {\n  try {\n    const result = yield call(loadCategorypostsAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CATEGORYPOSTS_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: SET_CURRENT_PAGENUM,\n      data: action.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CATEGORYPOSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCurpostAPI(data) {\n  return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n  try {\n    const result = yield call(loadCurpostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CURPOST_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CURPOST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadMainPost() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCurpost() {\n  yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCatoryposts() {\n  yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadSearchposts() {\n  yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n} //eventlistner와 비슷\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchUpdatePost), fork(watchLoadMainPost), fork(watchLoadCurpost), fork(watchLoadCatoryposts), fork(watchLoadSearchposts)]);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["all","fork","takeLatest","put","call","axios","SET_CURRENT_PAGENUM","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","LOAD_CATEGORYPOSTS_FAILURE","LOAD_CATEGORYPOSTS_REQUEST","LOAD_CATEGORYPOSTS_SUCCESS","LOAD_CURPOST_FAILURE","LOAD_CURPOST_REQUEST","LOAD_CURPOST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","result","type","error","console","response","addCommentAPI","postId","addComment","log","removePostAPI","delete","removePost","updatePostAPI","patch","id","updatePost","loadMainPostsAPI","get","page","loadMainPosts","searchPostsAPI","encodeURIComponent","searchPosts","loadCategorypostsAPI","category","loadCategoryposts","loadCurpostAPI","loadCurpost","watchAddPost","watchAddComment","watchRemovePost","watchUpdatePost","watchLoadMainPost","watchLoadCurpost","watchLoadCatoryposts","watchLoadSearchposts","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put , call} from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    SET_CURRENT_PAGENUM,\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    LOAD_MAIN_POSTS_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST,\n    LOAD_MAIN_POSTS_SUCCESS,\n    SEARCH_POSTS_FAILURE,\n    SEARCH_POSTS_REQUEST,\n    SEARCH_POSTS_SUCCESS,\n    LOAD_CATEGORYPOSTS_FAILURE,\n    LOAD_CATEGORYPOSTS_REQUEST,\n    LOAD_CATEGORYPOSTS_SUCCESS,\n    LOAD_CURPOST_FAILURE,\n    LOAD_CURPOST_REQUEST,\n    LOAD_CURPOST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            \n            type: ADD_POST_SUCCESS,\n            data : result.data,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_POST_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI,action.data)\n        console.log(\"결과 : \" , result);\n        yield put({ //put은 dispatch라고 생각\n            type: ADD_COMMENT_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_COMMENT_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI,action.data);\n        yield put({ //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n    try {        \n        const result = yield call(updatePostAPI,action.data)\n        console.log(result.data);\n        yield put({ //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadMainPostsAPI(data) {\n    return axios.get(`/posts/load/main/${data.page}`);\n}\n\nfunction* loadMainPosts(action) {\n    try {\n        const result = yield call(loadMainPostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n        yield put({\n            type : SET_CURRENT_PAGENUM,\n            data : action.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction searchPostsAPI(data) {\n    return axios.get(`/posts/search/${encodeURIComponent(data)}`);\n}\n\nfunction* searchPosts(action) {\n    try {\n        console.log(\"action.data : \", action.data);\n        const result = yield call(searchPostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: SEARCH_POSTS_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: SEARCH_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\n\nfunction loadCategorypostsAPI(data) {\n    return axios.get(`/posts/load/${data.category}/${data.page}`);\n}\n\nfunction* loadCategoryposts(action) {\n    try {\n        const result = yield call(loadCategorypostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CATEGORYPOSTS_SUCCESS,\n            data : result.data,\n        })\n        yield put({\n            type : SET_CURRENT_PAGENUM,\n            data : action.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CATEGORYPOSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadCurpostAPI(data) {\n    return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n    try {\n        const result = yield call(loadCurpostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CURPOST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CURPOST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\nfunction* watchLoadMainPost() {\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n} //eventlistner와 비슷\n\nfunction* watchLoadCurpost() {\n    yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\nfunction* watchLoadCatoryposts() {\n    yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\nfunction* watchLoadSearchposts() {\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n} //eventlistner와 비슷\n\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n        fork(watchLoadMainPost),\n        fork(watchLoadCurpost),\n        fork(watchLoadCatoryposts),\n        fork(watchLoadSearchposts),\n    ])\n}"]},"metadata":{},"sourceType":"module"}