{"ast":null,"code":"import { all, fork, delay, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_CURPOST_FAILURE, LOAD_CURPOST_REQUEST, LOAD_CURPOST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  console.log(\"add post\");\n\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"결과\");\n    console.log(result.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_POST_SUCCESS,\n      data: result.data //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.log(error.response);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: REMOVE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* updatePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: UPDATE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_POSTS_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCurpostAPI(data) {\n  return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n  try {\n    const result = yield call(loadCurpostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CURPOST_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_CURPOST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCurpost() {\n  yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchUpdatePost), fork(watchLoadPost), fork(watchLoadCurpost)]);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["all","fork","delay","takeLatest","put","call","axios","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_CURPOST_FAILURE","LOAD_CURPOST_REQUEST","LOAD_CURPOST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","console","log","result","type","error","response","removePostAPI","removePost","updatePostAPI","updatePost","loadPostsAPI","get","loadPosts","loadCurpostAPI","loadCurpost","watchAddPost","watchRemovePost","watchUpdatePost","watchLoadPost","watchLoadCurpost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, takeLatest, put , call} from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    LOAD_CURPOST_FAILURE,\n    LOAD_CURPOST_REQUEST,\n    LOAD_CURPOST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n    console.log(\"add post\");\n    try {\n        const result = yield call(addPostAPI,action.data)\n        console.log(\"결과\");\n        console.log(result.data);\n        yield put({ //put은 dispatch라고 생각\n            \n            type: ADD_POST_SUCCESS,\n            data : result.data,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.log(error.response);\n            yield put({\n                type: ADD_POST_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\n\nfunction removePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* updatePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadPostsAPI() {\n    return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadCurpostAPI(data) {\n    return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n    try {\n        const result = yield call(loadCurpostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CURPOST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        yield put({\n            type: LOAD_CURPOST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\nfunction* watchLoadCurpost() {\n    yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n        fork(watchLoadPost),\n        fork(watchLoadCurpost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}