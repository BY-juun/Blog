{"ast":null,"code":"import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from '../util/produce';\nexport var initialState = {\n  Posts: [],\n  currentPost: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  updatePostLoading: false,\n  updatePostDone: false,\n  updatePostError: null\n};\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport var UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport var UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = false;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.Posts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = false;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.Posts = draft.Posts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case UPDATE_POST_REQUEST:\n        draft.updatePostLoading = true;\n        draft.updatePostDone = false;\n        draft.updatePostError = false;\n        break;\n\n      case UPDATE_POST_SUCCESS:\n        draft.updatePostLoading = false;\n        draft.updatePostDone = true;\n        draft.Posts = draft.Posts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case UPDATE_POST_FAILURE:\n        draft.updatePostLoading = false;\n        draft.updatePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = false;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.Posts = action.data.concat(draft.Posts);\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPsostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/reducers/post.js"],"names":["shortId","faker","produce","initialState","Posts","currentPost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","updatePostLoading","updatePostDone","updatePostError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","reducer","state","action","draft","type","unshift","data","error","filter","v","id","loadPostLoading","loadPostDone","loadPostError","concat","loadPsostLoading"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from '../util/produce';\nexport const initialState = {\n    Posts:[],\n    currentPost: null,\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    updatePostLoading: false,\n    updatePostDone: false,\n    updatePostError: null,\n}\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\n\n\n\nconst reducer = (state = initialState, action) =>\n    produce(state, (draft) => {\n        switch (action.type) {\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = false;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading= false;\n                draft.addPostDone= true;\n                draft.Posts.unshift(action.data);\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading= false;\n                draft.addPostError= action.error;\n                break;\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = false;\n                break;\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.Posts = draft.Posts.filter((v)=>v.id!==action.data);\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading= false;\n                draft.removePostError= action.error;\n                break;\n\n            case UPDATE_POST_REQUEST:\n                draft.updatePostLoading = true;\n                draft.updatePostDone = false;\n                draft.updatePostError = false;\n                break;\n            case UPDATE_POST_SUCCESS:\n                draft.updatePostLoading = false;\n                draft.updatePostDone = true;\n                draft.Posts = draft.Posts.filter((v)=>v.id!==action.data);\n                break;\n            case UPDATE_POST_FAILURE:\n                draft.updatePostLoading= false;\n                draft.updatePostError= action.error;\n                break;\n\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostLoading = true;\n                draft.loadPostDone = false;\n                draft.loadPostError = false;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostLoading = false;\n                draft.loadPostDone = true;\n                draft.Posts = action.data.concat(draft.Posts);\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPsostLoading= false;\n                draft.loadPostError= action.error;\n                break;\n            default:\n                break;\n        }\n    });\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}