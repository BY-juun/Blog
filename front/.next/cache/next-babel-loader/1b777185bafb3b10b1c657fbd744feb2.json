{"ast":null,"code":"var __jsx = React.createElement;\nimport AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from \"next/router\";\nimport { useSelector } from \"react-redux\";\nimport React, { useCallback, useState } from \"react\";\nimport Head from \"next/head\";\nimport { LOAD_CATEGORYPOSTS_REQUEST } from \"../../reducers/post\";\nimport { Pagination } from \"antd\";\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport wrapper from \"../../store/configureStore\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport ListComponent from \"../../components/ListComponent\"; //More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\n\nconst category = () => {\n  const {\n    0: current,\n    1: setCurrent\n  } = useState(1);\n  let startIndex = 0;\n  let lastIndex = 10;\n  const totalPosts = useSelector(state => state.post.Posts);\n  const firstPosts = useSelector(state => state.post.Posts.slice(startIndex, lastIndex));\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(null);\n  const router = useRouter();\n  const {\n    category\n  } = router.query;\n  const onChange = useCallback(page => {\n    setCurrent(page);\n    startIndex = (page - 1) * 10;\n    lastIndex = startIndex + 10;\n    setPosts(totalPosts.slice(startIndex, lastIndex));\n  }, [current]);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, category)), __jsx(AppLayout, null, __jsx(\"h1\", {\n    style: {\n      marginTop: \"45px\",\n      textAlign: \"center\"\n    }\n  }, category), posts ? __jsx(ListComponent, {\n    Posts: posts\n  }) : __jsx(ListComponent, {\n    Posts: firstPosts\n  }), __jsx(Pagination, {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\",\n      marginBottom: \"15px\"\n    },\n    current: current,\n    onChange: onChange,\n    total: totalPosts.length\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_CATEGORYPOSTS_REQUEST,\n    data: context.params.category\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default category;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/pages/category/[category].js"],"names":["AppLayout","useRouter","useSelector","React","useCallback","useState","Head","LOAD_CATEGORYPOSTS_REQUEST","Pagination","LOAD_MY_INFO_REQUEST","wrapper","END","axios","ListComponent","category","current","setCurrent","startIndex","lastIndex","totalPosts","state","post","Posts","firstPosts","slice","posts","setPosts","router","query","onChange","page","marginTop","textAlign","marginBottom","length","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","dispatch","type","data","params","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from \"next/router\";\nimport { useSelector } from \"react-redux\";\nimport React, { useCallback,  useState } from \"react\";\nimport Head from \"next/head\";\nimport { LOAD_CATEGORYPOSTS_REQUEST } from \"../../reducers/post\";\nimport { Pagination } from \"antd\";\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport wrapper from \"../../store/configureStore\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport ListComponent from \"../../components/ListComponent\";\n\n//More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\nconst category = () => {\n  const [current, setCurrent] = useState(1);\n  let startIndex = 0;\n  let lastIndex = 10;\n  const totalPosts = useSelector((state) => state.post.Posts);\n  const firstPosts = useSelector((state) =>\n    state.post.Posts.slice(startIndex, lastIndex)\n  );\n  const [posts, setPosts] = useState(null);\n  const router = useRouter();\n  const { category } = router.query;\n\n  const onChange = useCallback(\n    (page) => {\n      setCurrent(page);\n      startIndex = (page - 1) * 10;\n      lastIndex = startIndex + 10;\n      setPosts(totalPosts.slice(startIndex, lastIndex));\n    },\n    [current]\n  );\n\n  return (\n    <>\n      <Head>\n        <title>{category}</title>\n      </Head>\n      <AppLayout>\n        <h1 style={{ marginTop: \"45px\", textAlign: \"center\" }}>{category}</h1>\n        {posts ? (\n          <ListComponent Posts={posts} />\n        ) : (\n          <ListComponent Posts={firstPosts} />\n        )}\n        <Pagination\n          style={{\n            textAlign: \"center\",\n            marginTop: \"20px\",\n            marginBottom: \"15px\",\n          }}\n          current={current}\n          onChange={onChange}\n          total={totalPosts.length}\n        />\n      </AppLayout>\n    </>\n  );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n  async (context) => {\n    //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n    const cookie = context.req ? context.req.headers.cookie : \"\";\n    axios.defaults.headers.Cookie = \"\";\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    });\n    context.store.dispatch({\n      type: LOAD_CATEGORYPOSTS_REQUEST,\n      data: context.params.category,\n    });\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  }\n);\n\nexport default category;\n"]},"metadata":{},"sourceType":"module"}