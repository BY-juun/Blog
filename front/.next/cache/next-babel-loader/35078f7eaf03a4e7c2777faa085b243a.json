{"ast":null,"code":"import { all, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SET_CURRENT_PAGENUM, UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, SEARCH_POSTS_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, LOAD_CATEGORYPOSTS_FAILURE, LOAD_CATEGORYPOSTS_REQUEST, LOAD_CATEGORYPOSTS_SUCCESS, LOAD_CURPOST_FAILURE, LOAD_CURPOST_REQUEST, LOAD_CURPOST_SUCCESS, LOAD_POSTNUM_FAILURE, LOAD_POSTNUM_REQUEST, LOAD_POSTNUM_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    console.log(result.data);\n    yield put({\n      type: UPDATE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction loadMainPostsAPI(data) {\n  return axios.get(`/posts/load/main/${data.page}`);\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.data);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: SET_CURRENT_PAGENUM,\n      data: action.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction searchPostsAPI(data) {\n  return axios.get(`/posts/search/${encodeURIComponent(data)}`);\n}\n\nfunction* searchPosts(action) {\n  try {\n    console.log(\"action.data : \", action.data);\n    const result = yield call(searchPostsAPI, action.data);\n    yield put({\n      type: SEARCH_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SEARCH_POSTS_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction loadCategorypostsAPI(data) {\n  return axios.get(`/posts/load/${data.category}/${data.page}`);\n}\n\nfunction* loadCategoryposts(action) {\n  try {\n    const result = yield call(loadCategorypostsAPI, action.data);\n    yield put({\n      type: LOAD_CATEGORYPOSTS_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: SET_CURRENT_PAGENUM,\n      data: action.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CATEGORYPOSTS_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction loadCurpostAPI(data) {\n  return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n  try {\n    const result = yield call(loadCurpostAPI, action.data);\n    yield put({\n      type: LOAD_CURPOST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CURPOST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction loadPostNumAPI(data) {\n  return axios.get(`/posts/load/length/${data}`);\n}\n\nfunction* loadPostNum(action) {\n  try {\n    const result = yield call(loadPostNumAPI, action.data);\n    yield put({\n      type: LOAD_POSTNUM_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_POSTNUM_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n}\n\nfunction* watchLoadMainPost() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction* watchLoadCurpost() {\n  yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n}\n\nfunction* watchLoadCatoryposts() {\n  yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n}\n\nfunction* watchLoadSearchposts() {\n  yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n}\n\nfunction* watchLoadPostnum() {\n  yield takeLatest(LOAD_POSTNUM_REQUEST, loadPostNum);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchUpdatePost), fork(watchLoadMainPost), fork(watchLoadCurpost), fork(watchLoadCatoryposts), fork(watchLoadSearchposts), fork(watchLoadPostnum)]);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["all","fork","takeLatest","put","call","axios","SET_CURRENT_PAGENUM","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","LOAD_CATEGORYPOSTS_FAILURE","LOAD_CATEGORYPOSTS_REQUEST","LOAD_CATEGORYPOSTS_SUCCESS","LOAD_CURPOST_FAILURE","LOAD_CURPOST_REQUEST","LOAD_CURPOST_SUCCESS","LOAD_POSTNUM_FAILURE","LOAD_POSTNUM_REQUEST","LOAD_POSTNUM_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","result","type","error","console","response","addCommentAPI","postId","addComment","removePostAPI","delete","removePost","updatePostAPI","patch","id","updatePost","log","loadMainPostsAPI","get","page","loadMainPosts","searchPostsAPI","encodeURIComponent","searchPosts","loadCategorypostsAPI","category","loadCategoryposts","loadCurpostAPI","loadCurpost","loadPostNumAPI","loadPostNum","watchAddPost","watchAddComment","watchRemovePost","watchUpdatePost","watchLoadMainPost","watchLoadCurpost","watchLoadCatoryposts","watchLoadSearchposts","watchLoadPostnum","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put , call} from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    SET_CURRENT_PAGENUM,\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    LOAD_MAIN_POSTS_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST,\n    LOAD_MAIN_POSTS_SUCCESS,\n    SEARCH_POSTS_FAILURE,\n    SEARCH_POSTS_REQUEST,\n    SEARCH_POSTS_SUCCESS,\n    LOAD_CATEGORYPOSTS_FAILURE,\n    LOAD_CATEGORYPOSTS_REQUEST,\n    LOAD_CATEGORYPOSTS_SUCCESS,\n    LOAD_CURPOST_FAILURE,\n    LOAD_CURPOST_REQUEST,\n    LOAD_CURPOST_SUCCESS,\n    LOAD_POSTNUM_FAILURE,\n    LOAD_POSTNUM_REQUEST,\n    LOAD_POSTNUM_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI,action.data)\n        yield put({ \n            type: ADD_POST_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_POST_FAILURE,\n                error: error.response \n            })\n        }\n\n}\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI,action.data)\n        yield put({ \n            type: ADD_COMMENT_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_COMMENT_FAILURE,\n                error: error.response \n            })\n        }\n\n}\n\n\nfunction removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI,action.data);\n        yield put({ \n            type: REMOVE_POST_SUCCESS,\n            data : result.data\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n    try {        \n        const result = yield call(updatePostAPI,action.data)\n        console.log(result.data);\n        yield put({\n            type: UPDATE_POST_SUCCESS,\n            data : result.data \n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data\n        })\n    }\n}\n\nfunction loadMainPostsAPI(data) {\n    return axios.get(`/posts/load/main/${data.page}`);\n}\n\nfunction* loadMainPosts(action) {\n    try {\n        const result = yield call(loadMainPostsAPI,action.data)\n        yield put({ \n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data : result.data,\n        })\n        yield put({\n            type : SET_CURRENT_PAGENUM,\n            data : action.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            data: error.response.data \n        })\n    }\n}\n\nfunction searchPostsAPI(data) {\n    return axios.get(`/posts/search/${encodeURIComponent(data)}`);\n}\n\nfunction* searchPosts(action) {\n    try {\n        console.log(\"action.data : \", action.data);\n        const result = yield call(searchPostsAPI,action.data)\n        yield put({\n            type: SEARCH_POSTS_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: SEARCH_POSTS_FAILURE,\n            data: error.response.data \n        })\n    }\n}\n\n\nfunction loadCategorypostsAPI(data) {\n    return axios.get(`/posts/load/${data.category}/${data.page}`);\n}\n\nfunction* loadCategoryposts(action) {\n    try {\n        const result = yield call(loadCategorypostsAPI,action.data)\n        yield put({ \n            type: LOAD_CATEGORYPOSTS_SUCCESS,\n            data : result.data,\n        })\n        yield put({\n            type : SET_CURRENT_PAGENUM,\n            data : action.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CATEGORYPOSTS_FAILURE,\n            data: error.response.data \n        })\n    }\n}\n\nfunction loadCurpostAPI(data) {\n    return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n    try {\n        const result = yield call(loadCurpostAPI,action.data)\n        yield put({ \n            type: LOAD_CURPOST_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CURPOST_FAILURE,\n            data: error.response.data \n        })\n    }\n}\n\nfunction loadPostNumAPI(data) {\n    return axios.get(`/posts/load/length/${data}`);\n}\n\nfunction* loadPostNum(action) {\n    try {\n        const result = yield call(loadPostNumAPI,action.data)\n        yield put({ \n            type: LOAD_POSTNUM_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_POSTNUM_FAILURE,\n            data: error.response.data \n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} \n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} \n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} \n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} \n\nfunction* watchLoadMainPost() {\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction* watchLoadCurpost() {\n    yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} \nfunction* watchLoadCatoryposts() {\n    yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} \n\nfunction* watchLoadSearchposts() {\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n} \n\nfunction* watchLoadPostnum() {\n    yield takeLatest(LOAD_POSTNUM_REQUEST, loadPostNum);\n} \n\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n        fork(watchLoadMainPost),\n        fork(watchLoadCurpost),\n        fork(watchLoadCatoryposts),\n        fork(watchLoadSearchposts),\n        fork(watchLoadPostnum),\n    ])\n}"]},"metadata":{},"sourceType":"module"}