{"version":3,"sources":["webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?27f0","webpack://_N_E/./pages/UpdatePost/.js"],"names":["window","__NEXT_P","push","UpdatePost","me","useSelector","state","user","id","useRouter","query","useEffect","email","message","error","Router","replace"],"mappings":"+FACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,mBACA,WACE,OAAO,EAAQ,Y,6NC8CRC,UAtCG,WACd,IAAOC,EAAMC,aAAY,SAACC,GAAD,OAASA,EAAMC,QAAjCH,GAECI,EADOC,sBACOC,MAAdF,GASR,OARAG,qBAAU,WACU,yBAAbP,EAAGQ,QAEFC,IAAQC,MAAM,mEACdC,IAAOC,QAAQ,QAErB,CAACZ,IAGC,oBACI,EAAC,IAAD,KACI,kDAEJ,EAAC,IAAD,KACI,EAAC,IAAD,CAAeI,GAAMA,S","file":"static/chunks/pages/UpdatePost/[id]-d33f38642557a5e21bd2.js","sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/UpdatePost/[id]\",\n      function () {\n        return require(\"private-next-pages/UpdatePost/[id].js\");\n      }\n    ]);\n  ","import React, { useEffect } from 'react';\nimport AppLayout from \"../../components/AppLayout\";\nimport Head from 'next/head';\nimport  Router, {useRouter } from 'next/router';\nimport WritePostForm from '../../components/WritePostForm';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user'\nimport {message} from 'antd';\nimport wrapper from \"../../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios'\nimport { useSelector } from 'react-redux';\n\nconst UpdatePost= () => {\n    const {me} = useSelector((state)=>state.user);\n    const router = useRouter();\n    const { id } = router.query;\n    useEffect(()=>{\n        if(me.email !== \"neostgeart@gmail.com\")\n        {\n            message.error(\"글 수정 권한이 없습니다\");\n            Router.replace('/');\n        }\n    },[me])\n\n    return (\n        <>\n            <Head>\n                <title>글수정하기</title>\n            </Head>\n            <AppLayout>\n                <WritePostForm id = {id}/>\n            </AppLayout>\n        </>\n    );\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    })\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  });\n\nexport default UpdatePost;"],"sourceRoot":""}