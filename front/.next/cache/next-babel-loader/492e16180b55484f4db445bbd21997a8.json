{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(updatePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdatePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  console.log(\"axios 호출\");\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"add post\");\n          _context.prev = 1;\n          _context.next = 4;\n          return call(addPostAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return put({\n            //put은 dispatch라고 생각\n            type: ADD_POST_SUCCESS,\n            data: result.data //data : result.data //성공결과가 담긴다\n\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(_context.t0.response);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response //실패결과가 담긴다\n\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context2.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction updatePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction updatePost(action) {\n  return _regeneratorRuntime.wrap(function updatePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: UPDATE_POST_FAILURE,\n            data: _context3.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            //put은 dispatch라고 생각\n            type: LOAD_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data: generateDummyPost(10)\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context4.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log(\"watch add post\");\n          _context5.next = 3;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n} //eventlistner와 비슷\n\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //eventlistner와 비슷\n\n\nfunction watchUpdatePost() {\n  return _regeneratorRuntime.wrap(function watchUpdatePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(UPDATE_POST_REQUEST, updatePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n} //eventlistner와 비슷\n\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //eventlistner와 비슷\n\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchUpdatePost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["addPost","removePost","updatePost","loadPosts","watchAddPost","watchRemovePost","watchUpdatePost","watchLoadPost","postSaga","all","fork","delay","takeLatest","put","axios","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","console","log","post","action","call","result","type","response","error","removePostAPI","updatePostAPI","loadPostsAPI"],"mappings":"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","sourcesContent":["import { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\n\nfunction addPostAPI(data) {\n    console.log(\"axios 호출\");\n    return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n    console.log(\"add post\");\n    try {\n        const result = yield call(addPostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: ADD_POST_SUCCESS,\n            data : result.data,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.log(error.response);\n            yield put({\n                type: ADD_POST_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\n\nfunction removePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* updatePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadPostsAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : generateDummyPost(10),\n        })\n    } catch (error) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    console.log(\"watch add post\");\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n        fork(watchLoadPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}