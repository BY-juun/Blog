{"ast":null,"code":"import { all, fork, delay, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_CATEGORYPOSTS_FAILURE, LOAD_CATEGORYPOSTS_REQUEST, LOAD_CATEGORYPOSTS_SUCCESS, LOAD_CURPOST_FAILURE, LOAD_CURPOST_REQUEST, LOAD_CURPOST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  console.log(\"add post\");\n\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"결과\");\n    console.log(result.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_POST_SUCCESS,\n      data: result.data //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.log(error.response);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.log(error.response);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: REMOVE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* updatePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: UPDATE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_POSTS_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCategorypostsAPI(data) {\n  return axios.get(`/posts/load/${data}`);\n}\n\nfunction* loadCategoryposts(action) {\n  try {\n    const result = yield call(loadCategorypostsAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CATEGORYPOSTS_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_CATEGORYPOSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCurpostAPI(data) {\n  return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n  try {\n    const result = yield call(loadCurpostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CURPOST_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_CURPOST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCurpost() {\n  yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCatoryposts() {\n  yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchUpdatePost), fork(watchLoadPost), fork(watchLoadCurpost), fork(watchLoadCatoryposts)]);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["all","fork","delay","takeLatest","put","call","axios","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_CATEGORYPOSTS_FAILURE","LOAD_CATEGORYPOSTS_REQUEST","LOAD_CATEGORYPOSTS_SUCCESS","LOAD_CURPOST_FAILURE","LOAD_CURPOST_REQUEST","LOAD_CURPOST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","console","log","result","type","error","response","addCommentAPI","postId","addComment","removePostAPI","removePost","updatePostAPI","updatePost","loadPostsAPI","get","loadPosts","loadCategorypostsAPI","loadCategoryposts","loadCurpostAPI","loadCurpost","watchAddPost","watchAddComment","watchRemovePost","watchUpdatePost","watchLoadPost","watchLoadCurpost","watchLoadCatoryposts","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,UAA3B,EAAuCC,GAAvC,EAA6CC,IAA7C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,EAIIC,gBAJJ,EAKIC,gBALJ,EAMIC,gBANJ,EAOIC,mBAPJ,EAQIC,mBARJ,EASIC,mBATJ,EAUIC,kBAVJ,EAWIC,kBAXJ,EAYIC,kBAZJ,EAaIC,0BAbJ,EAcIC,0BAdJ,EAeIC,0BAfJ,EAgBIC,oBAhBJ,EAiBIC,oBAjBJ,EAkBIC,oBAlBJ,EAmBIC,mBAnBJ,EAoBIC,mBApBJ,EAqBIC,mBArBJ,QAsBO,kBAtBP;;AAyBA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOvB,KAAK,CAACwB,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM9B,IAAI,CAACuB,UAAD,EAAYI,MAAM,CAACH,IAAnB,CAAzB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACN,IAAnB;AACA,UAAMzB,GAAG,CAAC;AAAE;AAERgC,MAAAA,IAAI,EAAExB,gBAFA;AAGNiB,MAAAA,IAAI,EAAGM,MAAM,CAACN,IAHR,CAIN;;AAJM,KAAD,CAAT;AAMH,GAVD,CAUE,OAAOQ,KAAP,EAAc;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACC,QAAlB;AACI,UAAMlC,GAAG,CAAC;AACNgC,MAAAA,IAAI,EAAE1B,gBADA;AAEN2B,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAFP,CAEgB;;AAFhB,KAAD,CAAT;AAIH;AAER;;AAGD,SAASC,aAAT,CAAuBV,IAAvB,EAA6B;AACzB,SAAOvB,KAAK,CAACwB,IAAN,CAAY,SAAQD,IAAI,CAACW,MAAO,UAAhC,EAA2CX,IAA3C,CAAP;AACH;;AAED,UAAUY,UAAV,CAAqBT,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMG,MAAM,GAAG,MAAM9B,IAAI,CAACkC,aAAD,EAAeP,MAAM,CAACH,IAAtB,CAAzB;AACA,UAAMzB,GAAG,CAAC;AAAE;AAERgC,MAAAA,IAAI,EAAErB,mBAFA;AAGNc,MAAAA,IAAI,EAAGM,MAAM,CAACN,IAHR,CAIN;;AAJM,KAAD,CAAT;AAMH,GARD,CAQE,OAAOQ,KAAP,EAAc;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACC,QAAlB;AACI,UAAMlC,GAAG,CAAC;AACNgC,MAAAA,IAAI,EAAEvB,mBADA;AAENwB,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAFP,CAEgB;;AAFhB,KAAD,CAAT;AAIH;AAER;;AAGD,SAASI,aAAT,CAAuBb,IAAvB,EAA6B;AACzB,SAAOvB,KAAK,CAACwB,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUc,UAAV,CAAqBX,MAArB,EAA6B;AACzB,MAAI;AACA,UAAM9B,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAME,GAAG,CAAC;AAAE;AACRgC,MAAAA,IAAI,EAAET,mBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOU,KAAP,EAAc;AACZ,UAAMjC,GAAG,CAAC;AACNgC,MAAAA,IAAI,EAAEX,mBADA;AAENI,MAAAA,IAAI,EAAEQ,KAAK,CAACC,QAAN,CAAeT,IAFf,CAEoB;;AAFpB,KAAD,CAAT;AAIH;AAEJ;;AAED,SAASe,aAAT,CAAuBf,IAAvB,EAA6B;AACzB,SAAOvB,KAAK,CAACwB,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUgB,UAAV,CAAqBb,MAArB,EAA6B;AACzB,MAAI;AACA,UAAM9B,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAME,GAAG,CAAC;AAAE;AACRgC,MAAAA,IAAI,EAAE3B,mBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAO4B,KAAP,EAAc;AACZ,UAAMjC,GAAG,CAAC;AACNgC,MAAAA,IAAI,EAAE7B,mBADA;AAENsB,MAAAA,IAAI,EAAEQ,KAAK,CAACC,QAAN,CAAeT,IAFf,CAEoB;;AAFpB,KAAD,CAAT;AAIH;AACJ;;AAED,SAASiB,YAAT,GAAwB;AACpB,SAAOxC,KAAK,CAACyC,GAAN,CAAU,aAAV,CAAP;AACH;;AAED,UAAUC,SAAV,CAAoBhB,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMG,MAAM,GAAG,MAAM9B,IAAI,CAACyC,YAAD,CAAzB;AACA,UAAM1C,GAAG,CAAC;AAAE;AACRgC,MAAAA,IAAI,EAAElB,kBADA;AAEN;AACAW,MAAAA,IAAI,EAAGM,MAAM,CAACN;AAHR,KAAD,CAAT;AAKH,GAPD,CAOE,OAAOQ,KAAP,EAAc;AACZ,UAAMjC,GAAG,CAAC;AACNgC,MAAAA,IAAI,EAAEpB,kBADA;AAENa,MAAAA,IAAI,EAAEQ,KAAK,CAACC,QAAN,CAAeT,IAFf,CAEoB;;AAFpB,KAAD,CAAT;AAIH;AACJ;;AAGD,SAASoB,oBAAT,CAA8BpB,IAA9B,EAAoC;AAChC,SAAOvB,KAAK,CAACyC,GAAN,CAAW,eAAclB,IAAK,EAA9B,CAAP;AACH;;AAED,UAAUqB,iBAAV,CAA4BlB,MAA5B,EAAoC;AAChC,MAAI;AACA,UAAMG,MAAM,GAAG,MAAM9B,IAAI,CAAC4C,oBAAD,EAAsBjB,MAAM,CAACH,IAA7B,CAAzB;AACA,UAAMzB,GAAG,CAAC;AAAE;AACRgC,MAAAA,IAAI,EAAEf,0BADA;AAEN;AACAQ,MAAAA,IAAI,EAAGM,MAAM,CAACN;AAHR,KAAD,CAAT;AAKH,GAPD,CAOE,OAAOQ,KAAP,EAAc;AACZ,UAAMjC,GAAG,CAAC;AACNgC,MAAAA,IAAI,EAAEjB,0BADA;AAENU,MAAAA,IAAI,EAAEQ,KAAK,CAACC,QAAN,CAAeT,IAFf,CAEoB;;AAFpB,KAAD,CAAT;AAIH;AACJ;;AAED,SAASsB,cAAT,CAAwBtB,IAAxB,EAA8B;AAC1B,SAAOvB,KAAK,CAACyC,GAAN,CAAW,cAAalB,IAAK,EAA7B,CAAP;AACH;;AAED,UAAUuB,WAAV,CAAsBpB,MAAtB,EAA8B;AAC1B,MAAI;AACA,UAAMG,MAAM,GAAG,MAAM9B,IAAI,CAAC8C,cAAD,EAAgBnB,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAMzB,GAAG,CAAC;AAAE;AACRgC,MAAAA,IAAI,EAAEZ,oBADA;AAEN;AACAK,MAAAA,IAAI,EAAGM,MAAM,CAACN;AAHR,KAAD,CAAT;AAKH,GAPD,CAOE,OAAOQ,KAAP,EAAc;AACZ,UAAMjC,GAAG,CAAC;AACNgC,MAAAA,IAAI,EAAEd,oBADA;AAENO,MAAAA,IAAI,EAAEQ,KAAK,CAACC,QAAN,CAAeT,IAFf,CAEoB;;AAFpB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUwB,YAAV,GAAyB;AACrB,QAAMlD,UAAU,CAACQ,gBAAD,EAAmBoB,OAAnB,CAAhB;AACH,C,CAAC;;;AAEF,UAAUuB,eAAV,GAA4B;AACxB,QAAMnD,UAAU,CAACW,mBAAD,EAAsB2B,UAAtB,CAAhB;AACH,C,CAAC;;;AAEF,UAAUc,eAAV,GAA4B;AACxB,QAAMpD,UAAU,CAACuB,mBAAD,EAAsBiB,UAAtB,CAAhB;AACH,C,CAAC;;;AAEF,UAAUa,eAAV,GAA4B;AACxB,QAAMrD,UAAU,CAACK,mBAAD,EAAsBqC,UAAtB,CAAhB;AACH,C,CAAC;;;AAEF,UAAUY,aAAV,GAA0B;AACtB,QAAMtD,UAAU,CAACc,kBAAD,EAAqB+B,SAArB,CAAhB;AACH,C,CAAC;;;AAEF,UAAUU,gBAAV,GAA6B;AACzB,QAAMvD,UAAU,CAACoB,oBAAD,EAAuB6B,WAAvB,CAAhB;AACH,C,CAAC;;;AAEF,UAAUO,oBAAV,GAAiC;AAC7B,QAAMxD,UAAU,CAACiB,0BAAD,EAA6B8B,iBAA7B,CAAhB;AACH,C,CAAC;;;AAEF,eAAe,UAAUU,QAAV,GAAqB;AAChC,QAAM5D,GAAG,CAAC,CACNC,IAAI,CAACoD,YAAD,CADE,EAENpD,IAAI,CAACqD,eAAD,CAFE,EAGNrD,IAAI,CAACsD,eAAD,CAHE,EAINtD,IAAI,CAACuD,eAAD,CAJE,EAKNvD,IAAI,CAACwD,aAAD,CALE,EAMNxD,IAAI,CAACyD,gBAAD,CANE,EAONzD,IAAI,CAAC0D,oBAAD,CAPE,CAAD,CAAT;AASH","sourcesContent":["import { all, fork, delay, takeLatest, put , call} from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    LOAD_CATEGORYPOSTS_FAILURE,\n    LOAD_CATEGORYPOSTS_REQUEST,\n    LOAD_CATEGORYPOSTS_SUCCESS,\n    LOAD_CURPOST_FAILURE,\n    LOAD_CURPOST_REQUEST,\n    LOAD_CURPOST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n    console.log(\"add post\");\n    try {\n        const result = yield call(addPostAPI,action.data)\n        console.log(\"결과\");\n        console.log(result.data);\n        yield put({ //put은 dispatch라고 생각\n            \n            type: ADD_POST_SUCCESS,\n            data : result.data,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.log(error.response);\n            yield put({\n                type: ADD_POST_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            \n            type: ADD_COMMENT_SUCCESS,\n            data : result.data,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.log(error.response);\n            yield put({\n                type: ADD_COMMENT_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction removePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* updatePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadPostsAPI() {\n    return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\n\nfunction loadCategorypostsAPI(data) {\n    return axios.get(`/posts/load/${data}`);\n}\n\nfunction* loadCategoryposts(action) {\n    try {\n        const result = yield call(loadCategorypostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CATEGORYPOSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        yield put({\n            type: LOAD_CATEGORYPOSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadCurpostAPI(data) {\n    return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n    try {\n        const result = yield call(loadCurpostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CURPOST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        yield put({\n            type: LOAD_CURPOST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\nfunction* watchLoadCurpost() {\n    yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\nfunction* watchLoadCatoryposts() {\n    yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n        fork(watchLoadPost),\n        fork(watchLoadCurpost),\n        fork(watchLoadCatoryposts),\n    ])\n}"]},"metadata":{},"sourceType":"module"}