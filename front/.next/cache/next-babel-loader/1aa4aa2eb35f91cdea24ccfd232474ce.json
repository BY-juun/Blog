{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  Posts: [{\n    id: 1,\n    Title: \"JavaScript 첫번째 게시글입니다\",\n    hashTag: [\"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"첫번째 게시글!\",\n    belong: \"JavaScript\",\n    createdAt: \"2017-06-13\"\n  }, {\n    id: 2,\n    Title: \"React 첫번째 게시글입니다!\",\n    hashTag: [\"React\", \"ReactHooks\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"두번째 게시글!\",\n    belong: \"React\",\n    createdAt: \"2018-06-20\"\n  }, {\n    id: 3,\n    Title: \"TypeScript 첫번째 게시글입니당\",\n    hashTag: [\"TypeScript\", \"Ts\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"세번째 게시글!\",\n    belong: \"TypeScript\",\n    createdAt: \"2019-04-22\"\n  }],\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  updatePostLoading: false,\n  updatePostDone: false,\n  updatePostError: null\n};\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport var UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport var UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\nexport var addPost = {\n  type: ADD_POST_REQUEST\n};\nexport var removePost = {\n  type: REMOV_POST_REQUEST\n};\nexport var updatePost = {\n  type: UPDATE_POST_REQUEST\n};\nvar dummyPost = {\n  id: 4,\n  Title: \"Database 첫번째 게시글입니당\",\n  hashTag: [\"DB\", \"Database\", \"CS\"],\n  content: \"네번째 게시글!\",\n  belong: \"Database\",\n  createdAt: \"2021-07-23\"\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: false\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        Posts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        //앞에다 추가해야 위로올라옴\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removPostError: false\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        Posts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        //앞에다 추가해야 위로올라옴\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case UPDATE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        updatePostLoading: true,\n        updatePostDone: false,\n        updatePostError: false\n      });\n\n    case UPDATE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        Posts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        //앞에다 추가해야 위로올라옴\n        updatePostLoading: false,\n        updatePostDone: true\n      });\n\n    case UPDATE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        updatePostLoading: false,\n        updatePostError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/reducers/post.js"],"names":["initialState","Posts","id","Title","hashTag","content","belong","createdAt","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","updatePostLoading","updatePostDone","updatePostError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","addPost","type","removePost","REMOV_POST_REQUEST","updatePost","dummyPost","reducer","state","action","mainPosts","error","removPostError"],"mappings":"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","sourcesContent":["export const initialState = {\n    Posts:\n        [\n            {\n                id: 1,\n                Title: \"JavaScript 첫번째 게시글입니다\",\n                hashTag: [\"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"첫번째 게시글!\",\n                belong: \"JavaScript\",\n                createdAt: \"2017-06-13\"\n            }\n            ,\n            {\n                id: 2,\n                Title: \"React 첫번째 게시글입니다!\",\n                hashTag: [\"React\", \"ReactHooks\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"두번째 게시글!\",\n                belong: \"React\",\n                createdAt: \"2018-06-20\"\n            },\n            {\n                id: 3,\n                Title: \"TypeScript 첫번째 게시글입니당\",\n                hashTag: [\"TypeScript\", \"Ts\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"세번째 게시글!\",\n                belong: \"TypeScript\",\n                createdAt: \"2019-04-22\"\n            }\n        ],\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    updatePostLoading: false,\n    updatePostDone: false,\n    updatePostError: null,\n}\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\n\n\nexport const addPost = {\n    type: ADD_POST_REQUEST\n};\n\n\nexport const removePost = {\n    type: REMOV_POST_REQUEST\n};\n\n\nexport const updatePost = {\n    type: UPDATE_POST_REQUEST\n};\n\nconst dummyPost = {\n    id: 4,\n    Title: \"Database 첫번째 게시글입니당\",\n    hashTag: [\"DB\", \"Database\", \"CS\"],\n    content: \"네번째 게시글!\",\n    belong: \"Database\",\n    createdAt: \"2021-07-23\"\n};\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_POST_REQUEST:\n            return {\n                ...state,\n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: false,\n            }\n        case ADD_POST_SUCCESS:\n            return {\n                ...state,\n                Posts: [dummyPost, ...state.mainPosts], //앞에다 추가해야 위로올라옴\n                addPostLoading: false,\n                addPostDone: true,\n            }\n        case ADD_POST_FAILURE:\n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error,\n            }\n\n        case REMOVE_POST_REQUEST:\n            return {\n                ...state,\n                removePostLoading: true,\n                removePostDone: false,\n                removPostError: false,\n            }\n        case REMOVE_POST_SUCCESS:\n            return {\n                ...state,\n                Posts: [dummyPost, ...state.mainPosts], //앞에다 추가해야 위로올라옴\n                removePostLoading: false,\n                removePostDone: true,\n            }\n        case REMOVE_POST_FAILURE:\n            return {\n                ...state,\n                removePostLoading: false,\n                removePostError: action.error,\n            }\n\n        case UPDATE_POST_REQUEST:\n            return {\n                ...state,\n                updatePostLoading: true,\n                updatePostDone: false,\n                updatePostError: false,\n            }\n        case UPDATE_POST_SUCCESS:\n            return {\n                ...state,\n                Posts: [dummyPost, ...state.mainPosts], //앞에다 추가해야 위로올라옴\n                updatePostLoading: false,\n                updatePostDone: true,\n            }\n        case UPDATE_POST_FAILURE:\n            return {\n                ...state,\n                updatePostLoading: false,\n                updatePostError: action.error,\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}