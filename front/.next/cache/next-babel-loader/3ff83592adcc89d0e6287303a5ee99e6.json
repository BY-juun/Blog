{"ast":null,"code":"import { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_POST_SUCCESS,\n      data: {\n        title: action.data.title,\n        category: action.data.category,\n        hashTag: action.data.hashTag,\n        content: action.data.content\n      } //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: REMOVE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* updatePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: UPDATE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_POST_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: {\n        title: action.data.title,\n        category: action.data.category,\n        hashTag: action.data.hashTag,\n        content: action.data.content\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n} //eventlistner와 비슷\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchUpdatePost)]);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["all","fork","delay","takeLatest","put","axios","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","type","title","category","hashTag","content","error","response","removePostAPI","removePost","updatePostAPI","updatePost","loadPostAPI","loadPost","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","watchAddPost","watchRemovePost","watchUpdatePost","watchLoadPost","LOAD_POST_REQUEST","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n\n        yield put({ //put은 dispatch라고 생각\n            type: ADD_POST_SUCCESS,\n            data : {\n                title : action.data.title,\n                category : action.data.category,\n                hashTag : action.data.hashTag,\n                content : action.data.content,\n            }\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\n\n\nfunction removePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* updatePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* loadPost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : {\n                title : action.data.title,\n                category : action.data.category,\n                hashTag : action.data.hashTag,\n                content : action.data.content,\n            }\n        })\n    } catch (error) {\n        yield put({\n            type: LOAD_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\n} //eventlistner와 비슷\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}