{"ast":null,"code":"import { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: REMOVE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\n\nfunction updatePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* updatePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(logInAPI,action.data)\n\n    yield put({\n      //put은 dispatch라고 생각\n      type: UPDATE_POST_SUCCESS //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchupdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\n\nexport default function* postSage() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchUpdatePost)]);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["all","fork","delay","takeLatest","put","axios","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","type","error","response","watchAddPost","removePostAPI","removePost","watchRemovePost","updatePostAPI","updatePost","watchupdatePost","postSage","watchUpdatePost"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAqBC,KAArB,EAA2BC,UAA3B,EAAsCC,GAAtC,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,EAIIC,gBAJJ,EAKIC,gBALJ,EAMIC,gBANJ,EAOIC,iBAPJ,EAQIC,kBARJ,EASIC,kBATJ,EAUIC,kBAVJ,EAWIC,mBAXJ,EAYIC,mBAZJ,EAaIC,mBAbJ,QAcS,kBAdT;;AAgBA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOf,KAAK,CAACgB,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAG;AACC,UAAMrB,KAAK,CAAC,IAAD,CAAX,CADD,CAEC;;AACA,UAAME,GAAG,CAAC;AAAE;AACRoB,MAAAA,IAAI,EAAGb,gBADD,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMc,KAAN,EAAY;AACT,UAAMrB,GAAG,CAAE;AACPoB,MAAAA,IAAI,EAAGf,gBADA;AAEPW,MAAAA,IAAI,EAAGK,KAAK,CAACC,QAAN,CAAeN,IAFf,CAEoB;;AAFpB,KAAF,CAAT;AAIH;AAEJ;;AAED,UAAUO,YAAV,GAAyB;AACrB,QAAMxB,UAAU,CAACO,gBAAD,EAAkBY,OAAlB,CAAhB;AACH,C,CAAC;;;AAEF,SAASM,aAAT,CAAuBR,IAAvB,EAA6B;AACzB,SAAOf,KAAK,CAACgB,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AAED,UAAUS,UAAV,CAAqBN,MAArB,EAA6B;AACzB,MAAG;AACC,UAAMrB,KAAK,CAAC,IAAD,CAAX,CADD,CAEC;;AACA,UAAME,GAAG,CAAC;AAAE;AACRoB,MAAAA,IAAI,EAAGN,mBADD,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMO,KAAN,EAAY;AACT,UAAMrB,GAAG,CAAE;AACPoB,MAAAA,IAAI,EAAGR,mBADA;AAEPI,MAAAA,IAAI,EAAGK,KAAK,CAACC,QAAN,CAAeN,IAFf,CAEoB;;AAFpB,KAAF,CAAT;AAIH;AAEJ;;AAED,UAAUU,eAAV,GAA4B;AACxB,QAAM3B,UAAU,CAACc,mBAAD,EAAqBY,UAArB,CAAhB;AACH,C,CAAC;;;AAEF,SAASE,aAAT,CAAuBX,IAAvB,EAA6B;AACzB,SAAOf,KAAK,CAACgB,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AAED,UAAUY,UAAV,CAAqBT,MAArB,EAA6B;AACzB,MAAG;AACC,UAAMrB,KAAK,CAAC,IAAD,CAAX,CADD,CAEC;;AACA,UAAME,GAAG,CAAC;AAAE;AACRoB,MAAAA,IAAI,EAAGhB,mBADD,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMiB,KAAN,EAAY;AACT,UAAMrB,GAAG,CAAE;AACPoB,MAAAA,IAAI,EAAGlB,mBADA;AAEPc,MAAAA,IAAI,EAAGK,KAAK,CAACC,QAAN,CAAeN,IAFf,CAEoB;;AAFpB,KAAF,CAAT;AAIH;AAEJ;;AAED,UAAUa,eAAV,GAA4B;AACxB,QAAM9B,UAAU,CAACI,mBAAD,EAAqByB,UAArB,CAAhB;AACH,C,CAAC;;;AAKF,eAAe,UAAUE,QAAV,GAAoB;AAC/B,QAAMlC,GAAG,CAAC,CACNC,IAAI,CAAC0B,YAAD,CADE,EAEN1B,IAAI,CAAC6B,eAAD,CAFE,EAGN7B,IAAI,CAACkC,eAAD,CAHE,CAAD,CAAT;AAMH","sourcesContent":["import { all, fork , delay,takeLatest,put} from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post',data);\n}\n\nfunction* addPost(action) {\n    try{\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type : ADD_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    }catch(error){\n        yield put ({\n            type : ADD_POST_FAILURE,\n            data : error.response.data //실패결과가 담긴다\n        })\n    }\n   \n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST,addPost);\n} //eventlistner와 비슷\n\nfunction removePostAPI(data) {\n    return axios.post('/api/post',data);\n}\n\nfunction* removePost(action) {\n    try{\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type : REMOVE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    }catch(error){\n        yield put ({\n            type : REMOVE_POST_FAILURE,\n            data : error.response.data //실패결과가 담긴다\n        })\n    }\n   \n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\n} //eventlistner와 비슷\n\nfunction updatePostAPI(data) {\n    return axios.post('/api/post',data);\n}\n\nfunction* updatePost(action) {\n    try{\n        yield delay(1000);\n        //const result = yield call(logInAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type : UPDATE_POST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n        })\n    }catch(error){\n        yield put ({\n            type : UPDATE_POST_FAILURE,\n            data : error.response.data //실패결과가 담긴다\n        })\n    }\n   \n}\n\nfunction* watchupdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST,updatePost);\n} //eventlistner와 비슷\n\n\n\n\nexport default function* postSage(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n       \n    ])\n}"]},"metadata":{},"sourceType":"module"}