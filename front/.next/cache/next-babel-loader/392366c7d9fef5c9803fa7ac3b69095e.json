{"ast":null,"code":"import { all, fork, delay, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_CATEGORYPOSTS_FAILURE, LOAD_CATEGORYPOSTS_REQUEST, LOAD_CATEGORYPOSTS_SUCCESS, LOAD_CURPOST_FAILURE, LOAD_CURPOST_REQUEST, LOAD_CURPOST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_POST_SUCCESS,\n      data: result.data //data : result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"결과 : \", result);\n    yield put({\n      //put은 dispatch라고 생각\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: REMOVE_POST_SUCCESS,\n      data: result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: UPDATE_POST_SUCCESS,\n      data: result.data //성공결과가 담긴다\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_POSTS_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCategorypostsAPI(data) {\n  return axios.get(`/posts/load/${data}`);\n}\n\nfunction* loadCategoryposts(action) {\n  try {\n    const result = yield call(loadCategorypostsAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CATEGORYPOSTS_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CATEGORYPOSTS_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction loadCurpostAPI(data) {\n  return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n  try {\n    const result = yield call(loadCurpostAPI, action.data);\n    yield put({\n      //put은 dispatch라고 생각\n      type: LOAD_CURPOST_SUCCESS,\n      //data : result.data //성공결과가 담긴다\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CURPOST_FAILURE,\n      data: error.response.data //실패결과가 담긴다\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCurpost() {\n  yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\n\nfunction* watchLoadCatoryposts() {\n  yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchUpdatePost), fork(watchLoadPost), fork(watchLoadCurpost), fork(watchLoadCatoryposts)]);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["all","fork","delay","takeLatest","put","call","axios","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_CATEGORYPOSTS_FAILURE","LOAD_CATEGORYPOSTS_REQUEST","LOAD_CATEGORYPOSTS_SUCCESS","LOAD_CURPOST_FAILURE","LOAD_CURPOST_REQUEST","LOAD_CURPOST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","result","type","error","console","response","addCommentAPI","postId","addComment","log","removePostAPI","delete","removePost","updatePostAPI","patch","id","updatePost","loadPostsAPI","get","loadPosts","loadCategorypostsAPI","loadCategoryposts","loadCurpostAPI","loadCurpost","watchAddPost","watchAddComment","watchRemovePost","watchUpdatePost","watchLoadPost","watchLoadCurpost","watchLoadCatoryposts","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, takeLatest, put , call} from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    LOAD_CATEGORYPOSTS_FAILURE,\n    LOAD_CATEGORYPOSTS_REQUEST,\n    LOAD_CATEGORYPOSTS_SUCCESS,\n    LOAD_CURPOST_FAILURE,\n    LOAD_CURPOST_REQUEST,\n    LOAD_CURPOST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            \n            type: ADD_POST_SUCCESS,\n            data : result.data,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_POST_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI,action.data)\n        console.log(\"결과 : \" , result);\n        yield put({ //put은 dispatch라고 생각\n            type: ADD_COMMENT_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_COMMENT_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI,action.data);\n        yield put({ //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n    try {        \n        const result = yield call(updatePostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadPostsAPI() {\n    return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\n\nfunction loadCategorypostsAPI(data) {\n    return axios.get(`/posts/load/${data}`);\n}\n\nfunction* loadCategoryposts(action) {\n    try {\n        const result = yield call(loadCategorypostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CATEGORYPOSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CATEGORYPOSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadCurpostAPI(data) {\n    return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n    try {\n        const result = yield call(loadCurpostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CURPOST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CURPOST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\nfunction* watchLoadCurpost() {\n    yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\nfunction* watchLoadCatoryposts() {\n    yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n        fork(watchLoadPost),\n        fork(watchLoadCurpost),\n        fork(watchLoadCatoryposts),\n    ])\n}"]},"metadata":{},"sourceType":"module"}