{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport AppLayout from \"../../components/AppLayout\";\nimport Router, { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useCallback, useEffect } from \"react\";\nimport { FormOutlined } from '@ant-design/icons';\nimport { REMOVE_POST_REQUEST } from \"../../reducers/post\";\nimport ReactHtmlParser from 'html-react-parser';\nimport { PageHeader, Tag, Comment, Avatar, Button } from 'antd';\nimport CommentForm from '../../components/CommentForm';\nimport moment from 'moment'; //More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\n\nmoment.locale(\"ko\");\n\nvar Post = function Post() {\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      currentPost = _useSelector.currentPost,\n      removePostDone = _useSelector.removePostDone,\n      removePostLoading = _useSelector.removePostLoading,\n      loadCurpostError = _useSelector.loadCurpostError;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  useEffect(function () {\n    if (loadCurpostError) {\n      alert(loadCurpostError);\n    }\n  }, [loadCurpostError]);\n  useEffect(function () {\n    if (removePostDone) {\n      alert(\"해당 글이 삭제되었습니다\");\n      Router.push('/');\n    }\n  }, [removePostDone]);\n  var onClickDelete = useCallback(function () {\n    var onemore = prompt(\"정말 삭제하시겠습니까? 삭제를 원하면 delete를 입력해주세요\");\n\n    if (onemore === \"delete\") {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: id\n      });\n    }\n  }, []);\n  return __jsx(AppLayout, null, me && me.nickname === \"By_juun\" && __jsx(\"div\", {\n    style: {\n      textAlign: \"right\",\n      marginTop: \"15px\"\n    }\n  }, me && me.email === \"neostgeart@gmail.com\" && __jsx(Button, {\n    style: {\n      backgroundColor: \"lightblue\"\n    }\n  }, __jsx(\"a\", {\n    href: \"/UpdatePost/\".concat(id)\n  }, \"\\uAE00 \\uC218\\uC815\")), me && me.email === \"neostgeart@gmail.com\" && __jsx(Button, {\n    style: {\n      backgroundColor: \"palevioletred\"\n    },\n    onClick: onClickDelete,\n    loading: removePostLoading\n  }, \"\\uAE00 \\uC0AD\\uC81C\")), currentPost && __jsx(\"div\", {\n    style: {\n      textAlign: \"right\",\n      marginRight: \"10px\",\n      marginTop: \"20px\"\n    }\n  }, moment(currentPost.createdAt).format('L')), currentPost && __jsx(\"h1\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"30px\"\n    }\n  }, currentPost.title), currentPost && __jsx(PageHeader, {\n    className: \"site-page-header\",\n    tags: __jsx(Tag, {\n      color: \"blue\"\n    }, currentPost.category),\n    subTitle: currentPost.hashTag\n  }), __jsx(\"div\", {\n    style: {\n      marginLeft: \"15px\",\n      marginRight: \"15px\",\n      minHeight: \"700px\"\n    }\n  }, currentPost && ReactHtmlParser(currentPost.content)), me ? __jsx(CommentForm, {\n    postId: id\n  }) : __jsx(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"15px\",\n      marginBottom: \"15px\",\n      fontSize: \"20px\"\n    }\n  }, __jsx(FormOutlined, null), __jsx(\"div\", null, \"\\uB313\\uAE00\\uC744 \\uC791\\uC131\\uD558\\uB824\\uBA74 \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694\")), __jsx(\"div\", {\n    style: {\n      borderTop: \"0.5px solid lightsteelblue\",\n      marginTop: \"10px\",\n      marginRight: \"15px\",\n      marginLeft: \"15px\",\n      marginBottom: \"15px\"\n    }\n  }, currentPost && currentPost.Comments && currentPost.Comments.map(function (commentInfo) {\n    return __jsx(Comment, {\n      key: commentInfo.id,\n      datetime: moment(commentInfo.createdAt, \"YYYYMMDD\").format('L'),\n      author: commentInfo.User.nickname,\n      content: commentInfo.content,\n      avatar: __jsx(Avatar, {\n        style: {\n          backgroundColor: commentInfo.User.color\n        }\n      }, commentInfo.User.nickname[0])\n    });\n  })));\n};\n\nexport var __N_SSP = true;\nexport default Post;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/pages/post/[id].js"],"names":["AppLayout","Router","useRouter","useDispatch","useSelector","useCallback","useEffect","FormOutlined","REMOVE_POST_REQUEST","ReactHtmlParser","PageHeader","Tag","Comment","Avatar","Button","CommentForm","moment","locale","Post","dispatch","router","id","query","state","post","currentPost","removePostDone","removePostLoading","loadCurpostError","user","me","alert","push","onClickDelete","onemore","prompt","type","data","nickname","textAlign","marginTop","email","backgroundColor","marginRight","createdAt","format","title","category","hashTag","marginLeft","minHeight","content","marginBottom","fontSize","borderTop","Comments","map","commentInfo","User","color"],"mappings":"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","sourcesContent":["import AppLayout from \"../../components/AppLayout\";\nimport  Router, {useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useCallback, useEffect } from \"react\";\nimport {FormOutlined} from '@ant-design/icons'\nimport { LOAD_CURPOST_REQUEST,REMOVE_POST_REQUEST } from \"../../reducers/post\";\nimport ReactHtmlParser from 'html-react-parser'\nimport { PageHeader, Tag, Comment, Avatar, Button} from 'antd';\nimport CommentForm from '../../components/CommentForm';\nimport wrapper from \"../../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios'\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user'\nimport moment from 'moment';\n//More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\n\nmoment.locale(\"ko\");\nconst Post = () => {\n    const dispatch = useDispatch();\n    const router = useRouter();\n    const { id } = router.query;\n    const { currentPost,removePostDone , removePostLoading, loadCurpostError} = useSelector((state) => state.post);\n    const {me} = useSelector((state)=>state.user);\n\n    useEffect(()=>{\n        if(loadCurpostError){\n            alert(loadCurpostError);\n        }\n    },[loadCurpostError])\n\n    useEffect(()=>{\n        if(removePostDone){\n            alert(\"해당 글이 삭제되었습니다\");\n            Router.push('/');\n        }\n    },[removePostDone])\n\n    const onClickDelete = useCallback(()=>{\n        const onemore = prompt(\"정말 삭제하시겠습니까? 삭제를 원하면 delete를 입력해주세요\");\n        if(onemore === \"delete\")\n        {\n            dispatch({\n               type : REMOVE_POST_REQUEST,\n               data : id,\n            })\n        }\n    },[]);\n\n    return (\n        <AppLayout>\n            {me && me.nickname === \"By_juun\" &&\n                <div style = {{textAlign : \"right\" , marginTop : \"15px\"}}>\n                    {me && me.email === \"neostgeart@gmail.com\" \n                    && <Button style = {{backgroundColor : \"lightblue\"}}><a  href = {`/UpdatePost/${id}`}>글 수정</a></Button>}\n                    {me && me.email === \"neostgeart@gmail.com\" \n                    && <Button style = {{backgroundColor : \"palevioletred\"}} onClick = {onClickDelete} loading = {removePostLoading}>글 삭제</Button>}\n                </div>\n            }\n            \n            {currentPost && <div style = {{textAlign : \"right\", marginRight : \"10px\", marginTop : \"20px\"}}>{moment(currentPost.createdAt).format('L')}</div>}\n            {currentPost && <h1 style = {{textAlign : \"center\", marginTop : \"30px\"}}>{currentPost.title}</h1>}\n            {currentPost && <PageHeader\n            className=\"site-page-header\"\n            tags = {<Tag color = \"blue\">{currentPost.category}</Tag>}\n            subTitle={currentPost.hashTag}\n            />}\n            <div style = {{marginLeft : \"15px\",marginRight : \"15px\",minHeight : \"700px\"}}>{currentPost && ReactHtmlParser(currentPost.content)}</div>\n            {me ? <CommentForm postId = {id}/> : <div style = {{textAlign : \"center\", marginTop : \"15px\",marginBottom : \"15px\", fontSize : \"20px\"}}><FormOutlined /><div>댓글을 작성하려면 로그인 해주세요</div></div>}\n            <div style = {{borderTop : \"0.5px solid lightsteelblue\" , marginTop : \"10px\", marginRight : \"15px\", marginLeft : \"15px\", marginBottom : \"15px\"}}>\n            {currentPost && currentPost.Comments \n            &&\n            currentPost.Comments.map((commentInfo) => <Comment key = {commentInfo.id}  \n             datetime = {moment(commentInfo.createdAt,\"YYYYMMDD\").format('L')}\n             author = {commentInfo.User.nickname} \n             content = {commentInfo.content} \n             avatar = {\n                 <Avatar style={{backgroundColor : commentInfo.User.color}}>{commentInfo.User.nickname[0]}</Avatar>\n             }>\n             </Comment> )\n            }\n            </div>\n        </AppLayout>\n    )\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    })\n    context.store.dispatch({\n        type : LOAD_CURPOST_REQUEST,\n        data : context.params.id,\n    })\n\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  });\n  \n\nexport default Post;"]},"metadata":{},"sourceType":"module"}