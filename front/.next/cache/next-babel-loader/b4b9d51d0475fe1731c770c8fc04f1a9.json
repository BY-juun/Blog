{"ast":null,"code":"var __jsx = React.createElement;\nimport AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from 'next/router';\nimport { useSelector } from 'react-redux';\nimport React, { useCallback, useState } from 'react';\nimport Head from 'next/head';\nimport { LOAD_CATEGORYPOSTS_REQUEST } from '../../reducers/post';\nimport { Pagination } from 'antd';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\nimport wrapper from \"../../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport ListComponent from \"../../components/ListComponent\"; //More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\n\nconst category = () => {\n  const {\n    0: current,\n    1: setCurrent\n  } = useState(1);\n  const {\n    Posts\n  } = useSelector(state => state.post);\n  let startIndex = 0;\n  let lastIndex = 10;\n  const {\n    0: showPosts,\n    1: setShowPosts\n  } = useState(Posts.slice(startIndex, lastIndex));\n  const router = useRouter();\n  const {\n    category\n  } = router.query;\n  const onChange = useCallback(page => {\n    setCurrent(page);\n    startIndex = (page - 1) * 10;\n    lastIndex = startIndex + 10;\n    setShowPosts(Posts.slice(startIndex, lastIndex));\n  }, [current, showPosts]);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, category)), __jsx(AppLayout, null, __jsx(\"h1\", {\n    style: {\n      marginTop: \"45px\",\n      textAlign: \"center\"\n    }\n  }, category), __jsx(ListComponent, {\n    Posts: showPosts\n  }), __jsx(Pagination, {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\",\n      marginBottom: \"15px\"\n    },\n    current: current,\n    onChange: onChange,\n    total: Posts.length\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_CATEGORYPOSTS_REQUEST,\n    data: context.params.category\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default category;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/pages/category/[category].js"],"names":["AppLayout","useRouter","useSelector","React","useCallback","useState","Head","LOAD_CATEGORYPOSTS_REQUEST","Pagination","LOAD_MY_INFO_REQUEST","wrapper","END","axios","ListComponent","category","current","setCurrent","Posts","state","post","startIndex","lastIndex","showPosts","setShowPosts","slice","router","query","onChange","page","marginTop","textAlign","marginBottom","length","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","dispatch","type","data","params","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import AppLayout from \"../../components/AppLayout\";\nimport { useRouter } from 'next/router';\nimport {  useSelector } from 'react-redux';\nimport React, { useCallback, useState } from 'react';\nimport Head from 'next/head';\nimport {LOAD_CATEGORYPOSTS_REQUEST} from '../../reducers/post'\nimport { Pagination } from 'antd';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user'\nimport wrapper from \"../../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from 'axios'\nimport ListComponent from \"../../components/ListComponent\";\n\n//More button을 누르면, 해당 글의 id를 가지고 Post Component로 온다\n//그렇다면 나는 서버로 해당 id에 해당하는 글을 가지고 와서 이를 보여주면댐.\nconst category = () => {\n    const [current,setCurrent] = useState(1);\n    const {Posts} = useSelector((state)=>(state.post));\n    let startIndex = 0; \n    let lastIndex = 10;\n    const [showPosts, setShowPosts] = useState(Posts.slice(startIndex,lastIndex));\n    const router = useRouter();\n    const { category } = router.query;\n\n    const onChange = useCallback(page => {\n        setCurrent(page);\n        startIndex = (page-1) * 10;\n        lastIndex = startIndex + 10;\n        setShowPosts(Posts.slice(startIndex,lastIndex));\n    },[current,showPosts]);\n    \n\n    return (\n        <>\n            <Head>\n                <title>{category}</title>\n            </Head>\n            <AppLayout>\n                <h1 style = {{marginTop : \"45px\",textAlign : \"center\"}}>{category}</h1>\n                <ListComponent Posts = {showPosts}/>\n                <Pagination style = {{textAlign : \"center\", marginTop : \"20px\", marginBottom : \"15px\"}} current={current} onChange={onChange} total={Posts.length} />\n            </AppLayout>\n        </> \n    );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    //원래 브라우저에서 cookie를 알아서 넣어주는데 , SSR시에는 브라우저 개입을 못하니까 프론트서버에서 헤더에 쿠키를 넣어서 보내줘야 한다.\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    })\n    context.store.dispatch({\n        type : LOAD_CATEGORYPOSTS_REQUEST,\n        data: context.params.category,\n    });\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  });\n  \n\nexport default category;"]},"metadata":{},"sourceType":"module"}