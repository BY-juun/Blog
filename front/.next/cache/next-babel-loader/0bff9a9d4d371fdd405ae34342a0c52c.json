{"ast":null,"code":"import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from '../util/produce';\nexport var initialState = {\n  Posts: [{\n    id: 1,\n    title: \"JavaScript 첫번째 게시글입니다\",\n    hashTag: [\"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"첫번째 게시글!\",\n    category: \"JavaScript\",\n    createdAt: \"2017-06-13\"\n  }, {\n    id: 2,\n    title: \"React 첫번째 게시글입니다!\",\n    hashTag: [\"React\", \"ReactHooks\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"두번째 게시글!\",\n    category: \"React\",\n    createdAt: \"2018-06-20\"\n  }, {\n    id: 3,\n    title: \"TypeScript 첫번째 게시글입니당\",\n    hashTag: [\"TypeScript\", \"Ts\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"세번째 게시글!\",\n    category: \"TypeScript\",\n    createdAt: \"2019-04-22\"\n  }, {\n    id: 4,\n    title: \"JavaScript 두번째 게시글입니다\",\n    hashTag: [\"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"첫번째 게시글!\",\n    category: \"JavaScript\",\n    createdAt: \"2017-06-13\"\n  }, {\n    id: 5,\n    title: \"React 두번째 게시글입니다!\",\n    hashTag: [\"#React\", \"ReactHooks\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"두번째 게시글!\",\n    category: \"React\",\n    createdAt: \"2018-06-20\"\n  }, {\n    id: 6,\n    title: \"TypeScript 두번째 게시글입니당\",\n    hashTag: [\"TypeScript\", \"Ts\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n    content: \"세번째 게시글!\",\n    category: \"TypeScript\",\n    createdAt: \"2019-04-22\"\n  }],\n  currentPost: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  updatePostLoading: false,\n  updatePostDone: false,\n  updatePostError: null\n};\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport var UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport var UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var removePost = {\n  type: REMOVE_POST_REQUEST\n};\nexport var updatePost = {\n  type: UPDATE_POST_REQUEST\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function (value, index) {\n    return {\n      id: shortId.generate(),\n      title: faker.lorem.sentence(),\n      hashTag: [\"dummy\", \"dummyPost\", \"Faker\", \"힘들어용\"],\n      category: index % 2 == 0 ? \"React\" : \"JavaScript\",\n      content: faker.lorem.paragraph()\n    };\n  });\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    title: data.title,\n    hashTag: data.hashTagSplit,\n    category: data.category,\n    content: data.content\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = false;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.Posts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = false;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.Posts = draft.Posts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case UPDATE_POST_REQUEST:\n        draft.updatePostLoading = true;\n        draft.updatePostDone = false;\n        draft.updatePostError = false;\n        break;\n\n      case UPDATE_POST_SUCCESS:\n        draft.updatePostLoading = false;\n        draft.updatePostDone = true;\n        draft.Posts = draft.Posts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case UPDATE_POST_FAILURE:\n        draft.updatePostLoading = false;\n        draft.updatePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = false;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.Posts = action.data.concat(draft.Posts);\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPsostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/reducers/post.js"],"names":["shortId","faker","produce","initialState","Posts","id","title","hashTag","content","category","createdAt","currentPost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","updatePostLoading","updatePostDone","updatePostError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","addPost","data","type","removePost","updatePost","generateDummyPost","number","Array","fill","map","value","index","generate","lorem","sentence","paragraph","dummyPost","hashTagSplit","reducer","state","action","draft","unshift","error","filter","v","LOAD_POST_REQUEST","loadPostLoading","loadPostDone","loadPostError","LOAD_POST_SUCCESS","concat","LOAD_POST_FAILURE","loadPsostLoading"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAO,IAAMC,YAAY,GAAG;AACxBC,EAAAA,KAAK,EACD,CACI;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,uBAFX;AAGIC,IAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,YAAP,EAAqB,MAArB,EAA6B,KAA7B,CAHb;AAIIC,IAAAA,OAAO,EAAE,UAJb;AAKIC,IAAAA,QAAQ,EAAE,YALd;AAMIC,IAAAA,SAAS,EAAE;AANf,GADJ,EAUI;AACIL,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,mBAFX;AAGIC,IAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,YAAV,EAAwB,IAAxB,EAA8B,YAA9B,EAA4C,MAA5C,EAAoD,KAApD,CAHb;AAIIC,IAAAA,OAAO,EAAE,UAJb;AAKIC,IAAAA,QAAQ,EAAE,OALd;AAMIC,IAAAA,SAAS,EAAE;AANf,GAVJ,EAkBI;AACIL,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,uBAFX;AAGIC,IAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,IAAf,EAAqB,IAArB,EAA2B,YAA3B,EAAyC,MAAzC,EAAiD,KAAjD,CAHb;AAIIC,IAAAA,OAAO,EAAE,UAJb;AAKIC,IAAAA,QAAQ,EAAE,YALd;AAMIC,IAAAA,SAAS,EAAE;AANf,GAlBJ,EA0BI;AACIL,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,uBAFX;AAGIC,IAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,YAAP,EAAqB,MAArB,EAA6B,KAA7B,CAHb;AAIIC,IAAAA,OAAO,EAAE,UAJb;AAKIC,IAAAA,QAAQ,EAAE,YALd;AAMIC,IAAAA,SAAS,EAAE;AANf,GA1BJ,EAmCI;AACIL,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,mBAFX;AAGIC,IAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,YAAX,EAAyB,IAAzB,EAA+B,YAA/B,EAA6C,MAA7C,EAAqD,KAArD,CAHb;AAIIC,IAAAA,OAAO,EAAE,UAJb;AAKIC,IAAAA,QAAQ,EAAE,OALd;AAMIC,IAAAA,SAAS,EAAE;AANf,GAnCJ,EA2CI;AACIL,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,uBAFX;AAGIC,IAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,IAAf,EAAqB,IAArB,EAA2B,YAA3B,EAAyC,MAAzC,EAAiD,KAAjD,CAHb;AAIIC,IAAAA,OAAO,EAAE,UAJb;AAKIC,IAAAA,QAAQ,EAAE,YALd;AAMIC,IAAAA,SAAS,EAAE;AANf,GA3CJ,CAFoB;AAsDxBC,EAAAA,WAAW,EAAE,IAtDW;AAuDxBC,EAAAA,gBAAgB,EAAE,KAvDM;AAwDxBC,EAAAA,aAAa,EAAE,KAxDS;AAyDxBC,EAAAA,cAAc,EAAE,IAzDQ;AA0DxBC,EAAAA,cAAc,EAAE,KA1DQ;AA2DxBC,EAAAA,WAAW,EAAE,KA3DW;AA4DxBC,EAAAA,YAAY,EAAE,IA5DU;AA6DxBC,EAAAA,iBAAiB,EAAE,KA7DK;AA8DxBC,EAAAA,cAAc,EAAE,KA9DQ;AA+DxBC,EAAAA,eAAe,EAAE,IA/DO;AAgExBC,EAAAA,iBAAiB,EAAE,KAhEK;AAiExBC,EAAAA,cAAc,EAAE,KAjEQ;AAkExBC,EAAAA,eAAe,EAAE;AAlEO,CAArB;AAqEP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAGP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAC9BC,IAAAA,IAAI,EAAEX,gBADwB;AAE9BU,IAAAA,IAAI,EAAJA;AAF8B,GAAX;AAAA,CAAhB;AAMP,OAAO,IAAME,UAAU,GAAG;AACtBD,EAAAA,IAAI,EAAER;AADgB,CAAnB;AAMP,OAAO,IAAMU,UAAU,GAAG;AACtBF,EAAAA,IAAI,EAAEL;AADgB,CAAnB;AAIP,OAAO,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD;AAAA,SAAYC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,GAAqBC,GAArB,CAAyB,UAACC,KAAD,EAAOC,KAAP;AAAA,WAAkB;AACpF1C,MAAAA,EAAE,EAAEL,OAAO,CAACgD,QAAR,EADgF;AAEpF1C,MAAAA,KAAK,EAAGL,KAAK,CAACgD,KAAN,CAAYC,QAAZ,EAF4E;AAGpF3C,MAAAA,OAAO,EAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,OAAvB,EAAgC,MAAhC,CAH0E;AAIpFE,MAAAA,QAAQ,EAAGsC,KAAK,GAAC,CAAN,IAAS,CAAT,GAAa,OAAb,GAAuB,YAJkD;AAKpFvC,MAAAA,OAAO,EAAGP,KAAK,CAACgD,KAAN,CAAYE,SAAZ;AAL0E,KAAlB;AAAA,GAAzB,CAAZ;AAAA,CAA1B;;AAQP,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACf,IAAD;AAAA,SAAW;AACzBhC,IAAAA,EAAE,EAAEL,OAAO,CAACgD,QAAR,EADqB;AAEzB1C,IAAAA,KAAK,EAAG+B,IAAI,CAAC/B,KAFY;AAGzBC,IAAAA,OAAO,EAAG8B,IAAI,CAACgB,YAHU;AAIzB5C,IAAAA,QAAQ,EAAG4B,IAAI,CAAC5B,QAJS;AAKzBD,IAAAA,OAAO,EAAE6B,IAAI,CAAC7B;AALW,GAAX;AAAA,CAAlB;;AASA,IAAM8C,OAAO,GAAG,SAAVA,OAAU;AAAA,MAACC,KAAD,uEAASpD,YAAT;AAAA,MAAuBqD,MAAvB;AAAA,SACZtD,OAAO,CAACqD,KAAD,EAAQ,UAACE,KAAD,EAAW;AACtB,YAAQD,MAAM,CAAClB,IAAf;AACI,WAAKX,gBAAL;AACI8B,QAAAA,KAAK,CAAC1C,cAAN,GAAuB,IAAvB;AACA0C,QAAAA,KAAK,CAACzC,WAAN,GAAoB,KAApB;AACAyC,QAAAA,KAAK,CAACxC,YAAN,GAAqB,KAArB;AACA;;AACJ,WAAKW,gBAAL;AACI6B,QAAAA,KAAK,CAAC1C,cAAN,GAAsB,KAAtB;AACA0C,QAAAA,KAAK,CAACzC,WAAN,GAAmB,IAAnB;AACAyC,QAAAA,KAAK,CAACrD,KAAN,CAAYsD,OAAZ,CAAoBN,SAAS,CAACI,MAAM,CAACnB,IAAR,CAA7B;AACA;;AACJ,WAAKR,gBAAL;AACI4B,QAAAA,KAAK,CAAC1C,cAAN,GAAsB,KAAtB;AACA0C,QAAAA,KAAK,CAACxC,YAAN,GAAoBuC,MAAM,CAACG,KAA3B;AACA;;AACJ,WAAK7B,mBAAL;AACI2B,QAAAA,KAAK,CAACvC,iBAAN,GAA0B,IAA1B;AACAuC,QAAAA,KAAK,CAACtC,cAAN,GAAuB,KAAvB;AACAsC,QAAAA,KAAK,CAACrC,eAAN,GAAwB,KAAxB;AACA;;AACJ,WAAKW,mBAAL;AACI0B,QAAAA,KAAK,CAACvC,iBAAN,GAA0B,KAA1B;AACAuC,QAAAA,KAAK,CAACtC,cAAN,GAAuB,IAAvB;AACAsC,QAAAA,KAAK,CAACrD,KAAN,GAAcqD,KAAK,CAACrD,KAAN,CAAYwD,MAAZ,CAAmB,UAACC,CAAD;AAAA,iBAAKA,CAAC,CAACxD,EAAF,KAAOmD,MAAM,CAACnB,IAAnB;AAAA,SAAnB,CAAd;AACA;;AACJ,WAAKL,mBAAL;AACIyB,QAAAA,KAAK,CAACvC,iBAAN,GAAyB,KAAzB;AACAuC,QAAAA,KAAK,CAACrC,eAAN,GAAuBoC,MAAM,CAACG,KAA9B;AACA;;AAEJ,WAAK1B,mBAAL;AACIwB,QAAAA,KAAK,CAACpC,iBAAN,GAA0B,IAA1B;AACAoC,QAAAA,KAAK,CAACnC,cAAN,GAAuB,KAAvB;AACAmC,QAAAA,KAAK,CAAClC,eAAN,GAAwB,KAAxB;AACA;;AACJ,WAAKW,mBAAL;AACIuB,QAAAA,KAAK,CAACpC,iBAAN,GAA0B,KAA1B;AACAoC,QAAAA,KAAK,CAACnC,cAAN,GAAuB,IAAvB;AACAmC,QAAAA,KAAK,CAACrD,KAAN,GAAcqD,KAAK,CAACrD,KAAN,CAAYwD,MAAZ,CAAmB,UAACC,CAAD;AAAA,iBAAKA,CAAC,CAACxD,EAAF,KAAOmD,MAAM,CAACnB,IAAnB;AAAA,SAAnB,CAAd;AACA;;AACJ,WAAKF,mBAAL;AACIsB,QAAAA,KAAK,CAACpC,iBAAN,GAAyB,KAAzB;AACAoC,QAAAA,KAAK,CAAClC,eAAN,GAAuBiC,MAAM,CAACG,KAA9B;AACA;;AAEJ,WAAKG,iBAAL;AACIL,QAAAA,KAAK,CAACM,eAAN,GAAwB,IAAxB;AACAN,QAAAA,KAAK,CAACO,YAAN,GAAqB,KAArB;AACAP,QAAAA,KAAK,CAACQ,aAAN,GAAsB,KAAtB;AACA;;AACJ,WAAKC,iBAAL;AACIT,QAAAA,KAAK,CAACM,eAAN,GAAwB,KAAxB;AACAN,QAAAA,KAAK,CAACO,YAAN,GAAqB,IAArB;AACAP,QAAAA,KAAK,CAACrD,KAAN,GAAcoD,MAAM,CAACnB,IAAP,CAAY8B,MAAZ,CAAmBV,KAAK,CAACrD,KAAzB,CAAd;AACA;;AACJ,WAAKgE,iBAAL;AACIX,QAAAA,KAAK,CAACY,gBAAN,GAAwB,KAAxB;AACAZ,QAAAA,KAAK,CAACQ,aAAN,GAAqBT,MAAM,CAACG,KAA5B;AACA;;AACJ;AACI;AA5DR;AA8DH,GA/DM,CADK;AAAA,CAAhB;;AAkEA,eAAeL,OAAf","sourcesContent":["import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from '../util/produce';\nexport const initialState = {\n    Posts:\n        [\n            {\n                id: 1,\n                title: \"JavaScript 첫번째 게시글입니다\",\n                hashTag: [\"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"첫번째 게시글!\",\n                category: \"JavaScript\",\n                createdAt: \"2017-06-13\"\n            }\n            ,\n            {\n                id: 2,\n                title: \"React 첫번째 게시글입니다!\",\n                hashTag: [\"React\", \"ReactHooks\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"두번째 게시글!\",\n                category: \"React\",\n                createdAt: \"2018-06-20\"\n            },\n            {\n                id: 3,\n                title: \"TypeScript 첫번째 게시글입니당\",\n                hashTag: [\"TypeScript\", \"Ts\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"세번째 게시글!\",\n                category: \"TypeScript\",\n                createdAt: \"2019-04-22\"\n            },\n            {\n                id: 4,\n                title: \"JavaScript 두번째 게시글입니다\",\n                hashTag: [\"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"첫번째 게시글!\",\n                category: \"JavaScript\",\n                createdAt: \"2017-06-13\"\n            }\n            ,\n            {\n                id: 5,\n                title: \"React 두번째 게시글입니다!\",\n                hashTag: [\"#React\", \"ReactHooks\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"두번째 게시글!\",\n                category: \"React\",\n                createdAt: \"2018-06-20\"\n            },\n            {\n                id: 6,\n                title: \"TypeScript 두번째 게시글입니당\",\n                hashTag: [\"TypeScript\", \"Ts\", \"Js\", \"JavaScript\", \"HTML\", \"Web\"],\n                content: \"세번째 게시글!\",\n                category: \"TypeScript\",\n                createdAt: \"2019-04-22\"\n            }\n        ],\n    currentPost: null,\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    updatePostLoading: false,\n    updatePostDone: false,\n    updatePostError: null,\n}\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\n\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\n\nexport const removePost = {\n    type: REMOVE_POST_REQUEST\n};\n\n\n\nexport const updatePost = {\n    type: UPDATE_POST_REQUEST\n};\n\nexport const generateDummyPost = (number) => Array(number).fill().map((value,index) => ({\n    id: shortId.generate(),\n    title : faker.lorem.sentence(),\n    hashTag : [\"dummy\", \"dummyPost\", \"Faker\", \"힘들어용\"],\n    category : index%2==0 ? \"React\" : \"JavaScript\",\n    content : faker.lorem.paragraph()\n}));\n\nconst dummyPost = (data) => ({\n    id: shortId.generate(),\n    title : data.title,\n    hashTag : data.hashTagSplit,\n    category : data.category,\n    content: data.content,\n});\n\n\nconst reducer = (state = initialState, action) =>\n    produce(state, (draft) => {\n        switch (action.type) {\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = false;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading= false;\n                draft.addPostDone= true;\n                draft.Posts.unshift(dummyPost(action.data));\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading= false;\n                draft.addPostError= action.error;\n                break;\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = false;\n                break;\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.Posts = draft.Posts.filter((v)=>v.id!==action.data);\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading= false;\n                draft.removePostError= action.error;\n                break;\n\n            case UPDATE_POST_REQUEST:\n                draft.updatePostLoading = true;\n                draft.updatePostDone = false;\n                draft.updatePostError = false;\n                break;\n            case UPDATE_POST_SUCCESS:\n                draft.updatePostLoading = false;\n                draft.updatePostDone = true;\n                draft.Posts = draft.Posts.filter((v)=>v.id!==action.data);\n                break;\n            case UPDATE_POST_FAILURE:\n                draft.updatePostLoading= false;\n                draft.updatePostError= action.error;\n                break;\n\n            case LOAD_POST_REQUEST:\n                draft.loadPostLoading = true;\n                draft.loadPostDone = false;\n                draft.loadPostError = false;\n                break;\n            case LOAD_POST_SUCCESS:\n                draft.loadPostLoading = false;\n                draft.loadPostDone = true;\n                draft.Posts = action.data.concat(draft.Posts);\n                break;\n            case LOAD_POST_FAILURE:\n                draft.loadPsostLoading= false;\n                draft.loadPostError= action.error;\n                break;\n            default:\n                break;\n        }\n    });\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}