{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updatePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(searchPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadCategoryposts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(loadCurpost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdatePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadCurpost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadCatoryposts),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadSearchposts),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n/* eslint-disable no-unused-vars */\nimport { all, fork, delay, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, SEARCH_POSTS_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, LOAD_CATEGORYPOSTS_FAILURE, LOAD_CATEGORYPOSTS_REQUEST, LOAD_CATEGORYPOSTS_SUCCESS, LOAD_CURPOST_FAILURE, LOAD_CURPOST_REQUEST, LOAD_CURPOST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            //put은 dispatch라고 생각\n            type: ADD_POST_SUCCESS,\n            data: result.data //data : result.data //성공결과가 담긴다\n\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response //실패결과가 담긴다\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          console.log(\"결과 : \", result);\n          _context2.next = 7;\n          return put({\n            //put은 dispatch라고 생각\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context2.next = 14;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response //실패결과가 담긴다\n\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            data: result.data //성공결과가 담긴다\n\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data.id), data);\n}\n\nfunction updatePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function updatePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(updatePostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          console.log(result.data);\n          _context4.next = 7;\n          return put({\n            //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            data: result.data //성공결과가 담긴다\n\n          });\n\n        case 7:\n          _context4.next = 14;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 14;\n          return put({\n            type: UPDATE_POST_FAILURE,\n            data: _context4.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts/load');\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostsAPI);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            //put은 dispatch라고 생각\n            type: LOAD_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context5.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction searchPostsAPI(data) {\n  return axios.get(\"/posts/search/\".concat(encodeURIComponent(data)));\n}\n\nfunction searchPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function searchPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          console.log(\"action.data : \", action.data);\n          _context6.next = 4;\n          return call(searchPostsAPI, action.data);\n\n        case 4:\n          result = _context6.sent;\n          _context6.next = 7;\n          return put({\n            //put은 dispatch라고 생각\n            type: SEARCH_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context6.next = 14;\n          break;\n\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 14;\n          return put({\n            type: SEARCH_POSTS_FAILURE,\n            data: _context6.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 9]]);\n}\n\nfunction loadCategorypostsAPI(data) {\n  return axios.get(\"/posts/load/\".concat(data));\n}\n\nfunction loadCategoryposts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadCategoryposts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadCategorypostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            //put은 dispatch라고 생각\n            type: LOAD_CATEGORYPOSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_CATEGORYPOSTS_FAILURE,\n            data: _context7.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction loadCurpostAPI(data) {\n  return axios.get(\"/post/load/\".concat(data));\n}\n\nfunction loadCurpost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadCurpost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(loadCurpostAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            //put은 dispatch라고 생각\n            type: LOAD_CURPOST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: LOAD_CURPOST_FAILURE,\n            data: _context8.t0.response.data //실패결과가 담긴다\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n} //eventlistner와 비슷\n\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} //eventlistner와 비슷\n\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n} //eventlistner와 비슷\n\n\nfunction watchUpdatePost() {\n  return _regeneratorRuntime.wrap(function watchUpdatePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(UPDATE_POST_REQUEST, updatePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} //eventlistner와 비슷\n\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n} //eventlistner와 비슷\n\n\nfunction watchLoadCurpost() {\n  return _regeneratorRuntime.wrap(function watchLoadCurpost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} //eventlistner와 비슷\n\n\nfunction watchLoadCatoryposts() {\n  return _regeneratorRuntime.wrap(function watchLoadCatoryposts$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n} //eventlistner와 비슷\n\n\nfunction watchLoadSearchposts() {\n  return _regeneratorRuntime.wrap(function watchLoadSearchposts$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n} //eventlistner와 비슷\n\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchUpdatePost), fork(watchLoadPost), fork(watchLoadCurpost), fork(watchLoadCatoryposts), fork(watchLoadSearchposts)]);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}","map":{"version":3,"sources":["/Users/byeongjun/My blog/front/sagas/post.js"],"names":["addPost","addComment","removePost","updatePost","loadPosts","searchPosts","loadCategoryposts","loadCurpost","watchAddPost","watchAddComment","watchRemovePost","watchUpdatePost","watchLoadPost","watchLoadCurpost","watchLoadCatoryposts","watchLoadSearchposts","postSaga","all","fork","delay","takeLatest","put","call","axios","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","LOAD_CATEGORYPOSTS_FAILURE","LOAD_CATEGORYPOSTS_REQUEST","LOAD_CATEGORYPOSTS_SUCCESS","LOAD_CURPOST_FAILURE","LOAD_CURPOST_REQUEST","LOAD_CURPOST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","action","result","type","console","error","response","addCommentAPI","postId","log","removePostAPI","updatePostAPI","patch","id","loadPostsAPI","get","searchPostsAPI","encodeURIComponent","loadCategorypostsAPI","loadCurpostAPI"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { all, fork, delay, takeLatest, put , call} from 'redux-saga/effects';\nimport axios from 'axios'\n\nimport {\n    UPDATE_POST_FAILURE,\n    UPDATE_POST_REQUEST,\n    UPDATE_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    SEARCH_POSTS_FAILURE,\n    SEARCH_POSTS_REQUEST,\n    SEARCH_POSTS_SUCCESS,\n    LOAD_CATEGORYPOSTS_FAILURE,\n    LOAD_CATEGORYPOSTS_REQUEST,\n    LOAD_CATEGORYPOSTS_SUCCESS,\n    LOAD_CURPOST_FAILURE,\n    LOAD_CURPOST_REQUEST,\n    LOAD_CURPOST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n} from '../reducers/post';\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            \n            type: ADD_POST_SUCCESS,\n            data : result.data,\n            //data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_POST_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI,action.data)\n        console.log(\"결과 : \" , result);\n        yield put({ //put은 dispatch라고 생각\n            type: ADD_COMMENT_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n            yield put({\n                type: ADD_COMMENT_FAILURE,\n                error: error.response //실패결과가 담긴다\n            })\n        }\n\n}\n\n\nfunction removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI,action.data);\n        yield put({ //put은 dispatch라고 생각\n            type: REMOVE_POST_SUCCESS,\n            data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n\n}\n\nfunction updatePostAPI(data) {\n    return axios.patch(`/post/${data.id}`, data);\n}\n\nfunction* updatePost(action) {\n    try {        \n        const result = yield call(updatePostAPI,action.data)\n        console.log(result.data);\n        yield put({ //put은 dispatch라고 생각\n            type: UPDATE_POST_SUCCESS,\n            data : result.data //성공결과가 담긴다\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: UPDATE_POST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadPostsAPI() {\n    return axios.get('/posts/load');\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_POSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction searchPostsAPI(data) {\n    return axios.get(`/posts/search/${encodeURIComponent(data)}`);\n}\n\nfunction* searchPosts(action) {\n    try {\n        console.log(\"action.data : \", action.data);\n        const result = yield call(searchPostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: SEARCH_POSTS_SUCCESS,\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: SEARCH_POSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\n\nfunction loadCategorypostsAPI(data) {\n    return axios.get(`/posts/load/${data}`);\n}\n\nfunction* loadCategoryposts(action) {\n    try {\n        const result = yield call(loadCategorypostsAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CATEGORYPOSTS_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CATEGORYPOSTS_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction loadCurpostAPI(data) {\n    return axios.get(`/post/load/${data}`);\n}\n\nfunction* loadCurpost(action) {\n    try {\n        const result = yield call(loadCurpostAPI,action.data)\n        yield put({ //put은 dispatch라고 생각\n            type: LOAD_CURPOST_SUCCESS,\n            //data : result.data //성공결과가 담긴다\n            data : result.data,\n        })\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_CURPOST_FAILURE,\n            data: error.response.data //실패결과가 담긴다\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n} //eventlistner와 비슷\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //eventlistner와 비슷\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //eventlistner와 비슷\n\nfunction* watchUpdatePost() {\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n} //eventlistner와 비슷\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //eventlistner와 비슷\n\nfunction* watchLoadCurpost() {\n    yield takeLatest(LOAD_CURPOST_REQUEST, loadCurpost);\n} //eventlistner와 비슷\n\nfunction* watchLoadCatoryposts() {\n    yield takeLatest(LOAD_CATEGORYPOSTS_REQUEST, loadCategoryposts);\n} //eventlistner와 비슷\n\nfunction* watchLoadSearchposts() {\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n} //eventlistner와 비슷\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n        fork(watchUpdatePost),\n        fork(watchLoadPost),\n        fork(watchLoadCurpost),\n        fork(watchLoadCatoryposts),\n        fork(watchLoadSearchposts),\n    ])\n}"]},"metadata":{},"sourceType":"module"}